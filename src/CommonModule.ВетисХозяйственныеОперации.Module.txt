
Функция ПолучитьСписокПредприятийПоХС(пХС, пТолькоПервое = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_Таблица.Предприятие
	|ИЗ
	|	РегистрСведений.ВетисПредприятияХС КАК _Таблица
	|ГДЕ
	|	_Таблица.ХозяйствующийСубъект = &ХС";
	
	Запрос.УстановитьПараметр("ХС", пХС);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_Список = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Если пТолькоПервое = Истина Тогда
			Возврат Выборка.Предприятие;
		КонецЕсли;
		_Список.Добавить(Выборка.Предприятие);
	КонецЦикла;
	
	Возврат _Список;
	
КонецФункции

Функция ПолучитьПредприятиеПоСкладу(пСклад, ПоУмолчанию = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	_Таблица.Ссылка КАК Предриятие
	|ИЗ
	|	Справочник.ВетисПредприятия КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И _Таблица.Склад = &Склад";
	
	Запрос.УстановитьПараметр("Склад", пСклад);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Предриятие;
	Иначе
		Возврат ПоУмолчанию;
	КонецЕсли;
	
КонецФункции

Процедура ПривязатьХСПредприятие(пХС, пПредприятие) Экспорт
	
	_мз = РегистрыСведений.ВетисПредприятияХС.СоздатьМенеджерЗаписи();
	_мз.ХозяйствующийСубъект = пХС;
	_мз.Предприятие = пПредприятие;
	_мз.ВСервисе = Ложь;
	_мз.Записать();
	
КонецПроцедуры

Процедура ОтвязатьХСПредприятие(пХС, пПредприятие) Экспорт
	
	_мз = РегистрыСведений.ВетисПредприятияХС.СоздатьМенеджерЗаписи();
	_мз.ХозяйствующийСубъект = пХС;
	_мз.Предприятие = пПредприятие;
	_мз.Удалить();
	
КонецПроцедуры

Процедура ОбновитьСвязиХСПредприятие(пХС = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Версия20 = Ветис.Версия_2_0();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	_Таблица.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	_Таблица.Предприятие,
	|	_Таблица.ВСервисе,
	|	_СоответствиеПредприятие.guid КАК EnterpriseGuid,
	|	_СоответствиеХС.guid КАК BusinessEntityGuid
	|ИЗ
	|	РегистрСведений.ВетисПредприятияХС КАК _Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _СоответствиеХС
	|		ПО _Таблица.ХозяйствующийСубъект = _СоответствиеХС.Ссылка
	|			И _СоответствиеХС.Ссылка ССЫЛКА Справочник.Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _СоответствиеПредприятие
	|		ПО _Таблица.Предприятие = _СоответствиеПредприятие.Ссылка
	|			И _СоответствиеПредприятие.Ссылка ССЫЛКА Справочник."+ВетисИмяСправочника.Enterprise()+"
	|ГДЕ
	|	ИСТИНА
	|//1	И _Таблица.ХозяйствующийСубъект = &ХС
	|	И ИСТИНА
	|ИТОГИ
	|	МАКСИМУМ(BusinessEntityGuid)
	|ПО
	|	ХозяйствующийСубъект";
	
	_нз = РегистрыСведений.ВетисПредприятияХС.СоздатьНаборЗаписей();
	_нз.ОбменДанными.Загрузка = Истина;
	Если НЕ пХС = Неопределено Тогда
		_нз.Отбор.ХозяйствующийСубъект.Установить(пХС);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//1", "");
		Запрос.УстановитьПараметр("ХС", пХС);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ВыборкаХС = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаХС.Следующий() Цикл
		
		_список = Новый Массив;
		_Enterprise = Неопределено;
		_параметры = Неопределено;
		Если _Версия20 Тогда
			Пока ВетисEnterpriseService_2_0.GetActivityLocationListСледующий(ВыборкаХС.BusinessEntityGuid, _Enterprise, _параметры, пОтказ, пОшибка) Цикл
				_список.Добавить(_Enterprise.guid);
			КонецЦикла;
		Иначе
			Пока ВетисEnterpriseService.GetActivityLocationListСледующий(ВыборкаХС.BusinessEntityGuid, _Enterprise, _параметры, пОтказ, пОшибка) Цикл
				_список.Добавить(_Enterprise.guid);
			КонецЦикла;
		КонецЕсли;
		
		Если пОтказ = Истина Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = ВыборкаХС.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.EnterpriseGuid = NULL ИЛИ Выборка.BusinessEntityGuid = NULL ИЛИ _список.Найти(Выборка.EnterpriseGuid) = Неопределено Тогда
				_ВСервисе = Ложь;
			Иначе
				_ВСервисе = Истина;
			КонецЕсли;
			
			//_мз = РегистрыСведений.ВетисПредприятияХС.СоздатьМенеджерЗаписи();
			_мз = _нз.Добавить();
			_мз.ХозяйствующийСубъект = Выборка.ХозяйствующийСубъект;
			_мз.Предприятие = Выборка.Предприятие;
			_мз.ВСервисе = _ВСервисе;
			//_мз.Записать();
			
		КонецЦикла;
	КонецЦикла;
	
	_нз.Записать();
	
КонецПроцедуры

Процедура СинхронизироватьЖурналВСД(пХозяйствующийСубъект = Неопределено, пПредприятие = Неопределено, пПараметры = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Перем _Отказ, _Ошибка;
	
	_ВетисCerberusEnterpriseСлой1с = ?(Ветис.Версия_2_0(), ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	
	Если пХозяйствующийСубъект = Неопределено Тогда
		_ХозяйствующийСубъект = Ветис.ТекущийХС();
	Иначе
		_ХозяйствующийСубъект = пХозяйствующийСубъект;
	КонецЕсли;
	
	_issuerId = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(_ХозяйствующийСубъект);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	_Таблица.Ссылка КАК Ссылка,
	|	_Таблица.uuid КАК uuid,
	|	_Таблица.Тип КАК Тип,
	|	_Таблица.Статус КАК Статус,
	|	_Таблица.СерияВСД КАК СерияВСД,
	|	_Таблица.НомерВСД КАК НомерВСД,
	|	_Таблица.ДатаВСД КАК ДатаВСД
	|ИЗ
	|	Документ.ВетисВетеринарноСопроводительныйДокумент КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	//|	И НЕ _Таблица.ПометкаУдаления
	|	И НЕ _Таблица.uuid = """"
	|//ови	(Истина
	|//оисх	И _Таблица.Отправитель = &ХС //опо И _Таблица.ОтправительПредприятие = &Предприятие
	|//ови	ИЛИ
	|//овх	И _Таблица.Получатель = &ХС //опо И _Таблица.ПолучательПредприятие = &Предприятие
	|//ови	)
	|//от	И _Таблица.Тип = &Тип
	|//ос	И _Таблица.Статус = &Статус
	|	И ИСТИНА";
	
	
	Запрос.УстановитьПараметр("ХС", _ХозяйствующийСубъект);
	Запрос.УстановитьПараметр("Предприятие", пПредприятие);
	
	Если НЕ пПараметры = Неопределено Тогда
	
		Если пПараметры.Свойство("Входящие") И пПараметры.Входящие = Истина Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//овх", "");
		КонецЕсли;
		
		Если пПараметры.Свойство("Исходящие") И пПараметры.Исходящие = Истина Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//оисх", "");
		КонецЕсли;
		
		Если пПараметры.Свойство("Входящие") И пПараметры.Входящие = Истина
			И пПараметры.Свойство("Исходящие") И пПараметры.Исходящие = Истина Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ови", "");
		КонецЕсли;
		
		Если пПараметры.Свойство("Статус") Тогда
			Запрос.УстановитьПараметр("Статус", пПараметры.Статус);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ос", "");
		КонецЕсли;
		
		Если пПараметры.Свойство("Тип") Тогда
			Запрос.УстановитьПараметр("Тип", пПараметры.Тип);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//от", "");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ пПредприятие = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//опо", "");
	КонецЕсли;
	
	_Ветки = Запрос.Выполнить().Выгрузить();
	
	Если пПредприятие = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	_Таблица.Ссылка КАК Ссылка,
		|	_Таблица.Ссылка.Наименование КАК Наименование,
		|	_Таблица.guid КАК guid
		|ИЗ
		|	РегистрСведений.ВетисСоответствие КАК _Таблица
		|ГДЕ
		|	ИСТИНА
		|	И _Таблица.Ссылка ССЫЛКА Справочник."+ВетисИмяСправочника.Enterprise()+"
		//только свои предприятия
		|	И _Таблица.Ссылка В
		|			(ВЫБРАТЬ
		|				_Таблица.Предприятие
		|			ИЗ
		|				РегистрСведений.ВетисПредприятияХС КАК _Таблица
		|			ГДЕ
		|				_Таблица.ХозяйствующийСубъект = &ХС)
		|	И ИСТИНА";
		Запрос.УстановитьПараметр("ХС", _ХозяйствующийСубъект);
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			пОшибка = "";
			пОтказ = Ложь;
			Пока Выборка.Следующий() Цикл
				
				СинхронизироватьЖурналВСДХСПредприятие(Выборка.guid, _issuerId, пПараметры, _Ветки, _Отказ, _Ошибка);
				
				Если _Отказ = Истина Тогда
					пОшибка = пОшибка + ?(пОшибка="", "", Символы.ПС) + _Ошибка + " (" + Выборка.Наименование + ")";
					пОтказ = Истина;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		СинхронизироватьЖурналВСДХСПредприятие(_ВетисCerberusEnterpriseСлой1с.Enterprise(пПредприятие), _issuerId, пПараметры, _Ветки, пОтказ, пОшибка);
		
		Если пОтказ = Истина Тогда Возврат; КонецЕсли;
		
	КонецЕсли;
	
	Для каждого _Строка Из _Ветки Цикл
		_Док = _Строка.Ссылка.ПолучитьОбъект();
		_Док.ДополнительныеСвойства.Вставить("Загрузка", Истина);
		_Док.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура СинхронизироватьЖурналВСДХСПредприятие(enterpriseGuid, issuerId = Неопределено, пПараметры = Неопределено, пВетки, пОтказ = Ложь, пОшибка = "")
	
	Перем _Тип, _Статус, _VetDocument, _Параметры;
	
	_Входящие = Истина;
	_Исходящие = Ложь;
	
	Если НЕ пПараметры = Неопределено Тогда
		Если пПараметры.Свойство("Тип", _Тип) Тогда
			_Тип = ВетисMercuryVetdocumentСлой1с.VetDocumentType(_Тип);
		КонецЕсли;
		Если пПараметры.Свойство("Статус", _Статус) Тогда
			_Статус = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(_Статус);
		КонецЕсли;
		пПараметры.Свойство("Входящие", _Входящие);
		пПараметры.Свойство("Исходящие", _Исходящие);
	КонецЕсли;
	
	_Версия20 = Ветис.Версия_2_0();
	
	_ВетисMercuryApplications = ?(_Версия20, ВетисMercuryApplications_2_0, ВетисMercuryApplications);
	
	Пока _ВетисMercuryApplications.getVetDocumentListСледующий(enterpriseGuid, issuerId, _Тип, _Статус, _VetDocument, _Параметры, пОтказ, пОшибка) Цикл
		
		_certifiedConsignment = ?(_Версия20, _VetDocument.certifiedConsignment, _VetDocument);
		
		Если _certifiedConsignment.consignee.enterprise = Неопределено
			ИЛИ _Входящие = Истина
			И НЕ _certifiedConsignment.consignee.enterprise.guid = enterpriseGuid
			Тогда
			Продолжить;
		КонецЕсли;
		
		Если _certifiedConsignment.consignor.enterprise = Неопределено
			ИЛИ _Исходящие = Истина
			И НЕ _certifiedConsignment.consignor.enterprise.guid = enterpriseGuid
			Тогда
			Продолжить;
		КонецЕсли;
		
		_Строка = пВетки.Найти(_VetDocument.uuid, "uuid");
		
		Если _Строка = Неопределено Тогда
			_док = Документы.ВетисВетеринарноСопроводительныйДокумент.СоздатьДокумент();
			_док.Дата = ТекущаяДата();
		ИначеЕсли Ложь
			И _Строка.Тип       = ВетисMercuryVetdocumentСлой1с.VetDocumentType(?(_Версия20, _VetDocument.vetDType, _VetDocument.type))
			И _Строка.Статус    = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(?(_Версия20, _VetDocument.vetDstatus, _VetDocument.status))
			И (_Строка.СерияВСД = _VetDocument.issueSeries ИЛИ _VetDocument.issueSeries = Неопределено)
			И _Строка.НомерВСД  = _VetDocument.issueNumber
			И _Строка.ДатаВСД   = _VetDocument.issueDate
			Тогда
			//считаем что ничего не изменилось
			пВетки.Удалить(_Строка);
			Продолжить;
		Иначе
			_док = _Строка.Ссылка.ПолучитьОбъект();
			пВетки.Удалить(_Строка);
		КонецЕсли;
		
		Если _Версия20 Тогда
			ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать_20(_док, _VetDocument);
		Иначе
			ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_док, _VetDocument);
		КонецЕсли;
		
		_док.Дата = _док.ДатаВСД;
		
		_док.ПометкаУдаления = Ложь;
		
		_док.Проведен = Истина;
		
		_док.ДополнительныеСвойства.Вставить("Загрузка");
		
		_док.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СинхронизироватьЖурналВСДИзменения(пХозяйствующийСубъект = Неопределено, пПредприятие = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если пХозяйствующийСубъект = Неопределено Тогда
		_ХозяйствующийСубъект = Ветис.ТекущийХС();
	Иначе
		_ХозяйствующийСубъект = пХозяйствующийСубъект;
	КонецЕсли;
	
	_issuerId = ?(Ветис.Версия_2_0(), ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с).BusinessEntity(_ХозяйствующийСубъект);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.uuid
	|ИЗ
	|	Документ.ВетисВетеринарноСопроводительныйДокумент КАК _Таблица
	|ГДЕ
	|	НЕ _Таблица.ПометкаУдаления");
	
	_Ветки = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(_Таблица.statusChangeDateTime), ДАТАВРЕМЯ(1, 1, 1)) КАК Период,
	|	ВЫБОР
	|//опо		КОГДА _Таблица.ОтправительПредприятие = &Предприятие
	|//опо			ТОГДА _Таблица.ОтправительПредприятие
	|//опо		КОГДА _Таблица.ПолучательПредприятие = &Предприятие
	|//опо			ТОГДА _Таблица.ПолучательПредприятие
	|		КОГДА _Таблица.Отправитель = &ХС
	|			ТОГДА _Таблица.ОтправительПредприятие
	|		КОГДА _Таблица.Получатель = &ХС
	|			ТОГДА _Таблица.ПолучательПредприятие
	|	КОНЕЦ КАК Предприятие
	|ПОМЕСТИТЬ ВПериод
	|ИЗ
	|	Документ.ВетисВетеринарноСопроводительныйДокумент КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И (_Таблица.Отправитель = &ХС
	|			ИЛИ _Таблица.Получатель = &ХС)
	|//опо	И (_Таблица.ОтправительПредприятие = &Предприятие
	|//опо			ИЛИ _Таблица.ПолучательПредприятие = &Предприятие)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|//опо		КОГДА _Таблица.ОтправительПредприятие = &Предприятие
	|//опо			ТОГДА _Таблица.ОтправительПредприятие
	|//опо		КОГДА _Таблица.ПолучательПредприятие = &Предприятие
	|//опо			ТОГДА _Таблица.ПолучательПредприятие
	|		КОГДА _Таблица.Отправитель = &ХС
	|			ТОГДА _Таблица.ОтправительПредприятие
	|		КОГДА _Таблица.Получатель = &ХС
	|			ТОГДА _Таблица.ПолучательПредприятие
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка КАК Ссылка,
	|	_Таблица.Ссылка.Наименование КАК Наименование,
	|	_Таблица.guid КАК guid,
	|	ЕСТЬNULL(_Период.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК Период
	|ИЗ
	|	РегистрСведений.ВетисСоответствие КАК _Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВПериод КАК _Период
	|		ПО _Таблица.Ссылка = _Период.Предприятие
	|ГДЕ
	|	ИСТИНА
	|//опо	И _Таблица.Ссылка = &Предприятие
	|	И _Таблица.Ссылка ССЫЛКА Справочник.ВетисПредприятия
	|	И _Таблица.Ссылка В
	|			(ВЫБРАТЬ
	|				_Таблица.Предприятие
	|			ИЗ
	|				РегистрСведений.ВетисПредприятияХС КАК _Таблица
	|			ГДЕ
	|				_Таблица.ХозяйствующийСубъект = &ХС)
	|	И ИСТИНА";
	
	Запрос.УстановитьПараметр("ХС", _ХозяйствующийСубъект);
	Запрос.УстановитьПараметр("Предприятие", пПредприятие);
	
	Если НЕ пПредприятие = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//опо", "");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			//только измененные
			//сделать: проверить, возможно статус не всегда актуальный
			//СинхронизироватьЖурналВСДИзмененияХСПредприятие(Выборка.guid, Выборка.Ссылка, _issuerId, _ХозяйствующийСубъект, Выборка.Период - 60*60*24, , _Ветки, пОтказ, пОшибка);
			
			//все (для отладки)
			СинхронизироватьЖурналВСДИзмененияХСПредприятие(Выборка.guid, Выборка.Ссылка, _issuerId, _ХозяйствующийСубъект, , , _Ветки, пОтказ, пОшибка);
			
			Если пОтказ = Истина Тогда
				пОшибка = пОшибка + " (" + Выборка.Наименование + ")";
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СинхронизироватьЖурналВСДИзмененияХСПредприятие(enterpriseGuid, пПредприятие, issuerId, пХС, beginDate, endDate = Неопределено, пВетки, пОтказ = Ложь, пОшибка = "")
	
	Перем _vetDocument, _Параметры;
	
	_Версия20 = Ветис.Версия_2_0();
	
	_ВетисMercuryApplications = ?(_Версия20, ВетисMercuryApplications_2_0, ВетисMercuryApplications);
	_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	
	Пока _ВетисMercuryApplications.GetVetDocumentChangesListСледующий(enterpriseGuid, issuerId, beginDate, endDate, _vetDocument, _Параметры, пОтказ, пОшибка) Цикл
		
		Если _Версия20 И (_vetDocument.statusChange = Неопределено ИЛИ _vetDocument.statusChange.Количество() = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		_certifiedConsignment = ?(_Версия20, _VetDocument.certifiedConsignment, _VetDocument);
		
		Если _certifiedConsignment.consignee.enterprise = Неопределено
			ИЛИ _certifiedConsignment.consignor.enterprise = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		_Строка = пВетки.Найти(_vetDocument.uuid, "uuid");
		
		Если _Строка = Неопределено Тогда
			_Строка = Документы.ВетисВетеринарноСопроводительныйДокумент.НайтиПоРеквизиту("uuid", _vetDocument.uuid);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(_Строка) Тогда
			_док = Документы.ВетисВетеринарноСопроводительныйДокумент.СоздатьДокумент();
			_док.Дата = ТекущаяДата();
		Иначе
			_док = _Строка.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		Если _Версия20 Тогда
			ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать_20(_док, _vetDocument);
		Иначе
			ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_док, _vetDocument);
		КонецЕсли;
		
		_док.Дата = _док.ДатаВСД;
		
		_док.ПометкаУдаления = Ложь;
		
		_док.Проведен = Истина;
		
		_док.ДополнительныеСвойства.Вставить("Загрузка");
		
		_док.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СинхронизироватьСкладскойЖурнал(пХС, пПредприятие, пНачалоПериода = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Перем _stockEntry, _параметры;
	
	_Версия20 = Ветис.Версия_2_0();
	_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	_ВетисMercuryApplications = ?(_Версия20, ВетисMercuryApplications_2_0, ВетисMercuryApplications);
	_ВетисArgusProductionСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusProductionСлой1с);
	_ВетисArgusCommonСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusCommonСлой1с);
	
	_issuerId = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(пХС);
	
	_enterpriseGuid = _ВетисCerberusEnterpriseСлой1с.Enterprise(пПредприятие);
	
	Если пНачалоПериода = Неопределено Тогда
		_запрос = Новый Запрос("ВЫБРАТЬ ЕСТЬNULL(МАКСИМУМ(updateDate), ДАТАВРЕМЯ(1,1,1)) КАК Период ИЗ РегистрСведений.ВетисСкладскойЖурнал ГДЕ ХозяйствующийСубъект = &ХС И Предприятие = &Предприятие");
		_запрос.УстановитьПараметр("ХС", пХС);
		_запрос.УстановитьПараметр("Предприятие", пПредприятие);
		_выборка = _запрос.Выполнить().Выбрать();
		_выборка.Следующий();
		_НачалоПериода = _выборка.Период + 1;
	Иначе
		_НачалоПериода = пНачалоПериода;
	КонецЕсли;
	
	//_параметры = Новый Структура("count", 1000);
	
	//2017-11-27
	//дает разные результаты в 1.4 и в 2.0
	Пока _ВетисMercuryApplications.getStockEntryChangesListСледующий(_enterpriseGuid, _НачалоПериода, , _issuerId, _stockEntry, _параметры, пОтказ, пОшибка) Цикл
		
		_мз = РегистрыСведений.ВетисСкладскойЖурнал.СоздатьМенеджерЗаписи();
		
		_мз.ХозяйствующийСубъект = пХС;
		_мз.Предприятие = пПредприятие;
		
		_мз.guid = _stockEntry.guid;
		_мз.uuid = _stockEntry.uuid;
		_мз.last = _stockEntry.last;
		
		_мз.status = _stockEntry.status;
		_мз._active = _stockEntry.active;
		_мз.entryNumber = _stockEntry.entryNumber;
		
		_мз.createDate = Ветис.ВремяМестное(_stockEntry.createDate);// xs:dateTime
		_мз.updateDate = Ветис.ВремяМестное(_stockEntry.updateDate);// xs:dateTime
		
		_мз.ProductType = _stockEntry.batch.productType;
		_мз.Product     = _stockEntry.batch.product.guid;
		_мз.SubProduct  = _stockEntry.batch.subProduct.guid;
		_мз.ProductItem = _stockEntry.batch.productItem.guid;
		
		_мз.Unit        = _stockEntry.batch.unit.guid;
		_мз.volume      = _stockEntry.batch.volume;
		
		Если _Версия20 Тогда
			
			_мз.owner = _stockEntry.batch.owner.guid;
			
			Если НЕ _stockEntry.batch.packageList = Неопределено Тогда
				//берем одну последнюю
				_package = ВетисDictionaryСлой1с.PackageList(_stockEntry.batch.packageList);
				_мз.PackingForm   = _package.packingType.guid;
				_мз.packingAmount = _package.quantity;
				
				//и текстом список упаковок
				_упаковка = "";
				Для каждого _package Из _stockEntry.batch.packageList.package Цикл
					_упаковка = _упаковка + "; " + _package.level + ") " + _package.packingType.name + " (" + _package.packingType.guid + ") " + ?(_package.quantity = 0, "", ", " + _package.quantity);
				КонецЦикла;
				_мз.package = Сред(_упаковка, 3);
			КонецЕсли;
			
			Если НЕ _stockEntry.batch.origin = Неопределено Тогда
				//берем первого
				Если _stockEntry.batch.origin.producer.Количество()>0 Тогда
					_мз.producer = _stockEntry.batch.origin.producer[0].enterprise.guid;
					_мз.producerRole = _stockEntry.batch.origin.producer[0].role;
				КонецЕсли;
				Если НЕ _stockEntry.batch.origin.productItem = Неопределено Тогда
					_мз.producerProductItem = _stockEntry.batch.origin.productItem.guid;
					_мз.producerProductItemName = _stockEntry.batch.origin.productItem.name;
				КонецЕсли;
				_мз.country = _stockEntry.batch.origin.country.guid;
			КонецЕсли;
			
			Для каждого _vetDocument Из _stockEntry.vetDocument Цикл
				_мз.vetDocument = _vetDocument.uuid;
				//берем только первый
				Прервать;
			КонецЦикла;
			
			_мз.dateOfProductionFirst = ВетисDictionary_2_0.ComplexDate(_stockEntry.batch.dateOfProduction.firstDate, Истина);
			_мз.dateOfProductionSecond = ВетисDictionary_2_0.ComplexDate(_stockEntry.batch.dateOfProduction.secondDate, Истина);
			_мз.dateOfProductionInformal = _stockEntry.batch.dateOfProduction.informalDate;
			
			_мз.expiryDateFirst = ВетисDictionary_2_0.ComplexDate(_stockEntry.batch.expiryDate.firstDate, Истина);
			_мз.expiryDateSecond = ВетисDictionary_2_0.ComplexDate(_stockEntry.batch.expiryDate.secondDate, Истина);
			_мз.expiryDateInformal = _stockEntry.batch.expiryDate.informalDate;
			
		Иначе
			
			_мз.owner = _stockEntry.batch.owner.guid;
			
			_мз.PackingForm = ?(_stockEntry.batch.packingList = Неопределено, "", _stockEntry.batch.packingList.packingForm[0].uuid);
			_мз.packingAmount = _stockEntry.batch.packingAmount;
			
			Если НЕ _stockEntry.batch.packingList = Неопределено Тогда
				_упаковка = "";
				Для каждого _package Из _stockEntry.batch.packingList.packingForm Цикл
					_упаковка = _упаковка + "; " + _package.name;
				КонецЦикла;
				_мз.package = Сред(_упаковка, 3);
			КонецЕсли;
			
			Если НЕ _stockEntry.batch.producerList = Неопределено Тогда
				//берем первого
				Если _stockEntry.batch.producerList.producer.Количество()>0 Тогда
					_мз.producer = _stockEntry.batch.producerList.producer[0].enterprise.guid;
					_мз.producerRole = _stockEntry.batch.producerList.producer[0].role;
				КонецЕсли;
				_мз.country = _stockEntry.batch.countryOfOrigin.guid;
			КонецЕсли;
			
			Если НЕ _stockEntry.batch.productMarkingList = Неопределено Тогда
				_Mark = "";
				Для каждого _productMarking Из _stockEntry.batch.productMarkingList.productMarking Цикл
					_Mark = _Mark + _productMarking.__content + "(" + _productMarking.class + "); ";
				КонецЦикла;
				_мз.productMarking = _Mark;
			КонецЕсли;
			
			_мз.dateOfProductionFirst = ВетисBase.ComplexDate(_stockEntry.batch.dateOfProduction.firstDate, Истина);
			_мз.dateOfProductionSecond = ВетисBase.ComplexDate(_stockEntry.batch.dateOfProduction.secondDate, Истина);
			
			_мз.expiryDateFirst = ВетисBase.ComplexDate(_stockEntry.batch.expiryDate.firstDate, Истина);
			_мз.expiryDateSecond = ВетисBase.ComplexDate(_stockEntry.batch.expiryDate.secondDate, Истина);
			
		КонецЕсли;
		
		_мз.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

//только для v2.0
Процедура СинхронизироватьСкладскойЖурналОстатки_20(пХС, пПредприятие, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Перем _stockEntry, _параметры;
	
	Если НЕ Ветис.Версия_2_0() Тогда
		Возврат;
	КонецЕсли;
	
	_issuerId = ВетисDictionaryСлой1с.BusinessEntity(пХС);
	
	_enterpriseGuid = ВетисDictionaryСлой1с.Enterprise(пПредприятие);
	
	_sp = ВетисMercuryVetdocument_2_0.StockEntrySearchPattern(ВетисКонстанты.StockEntryBlankFilter_NOT_BLANK());
	
	//_параметры = Новый Структура("count", 1000);
	
	Пока ВетисMercuryApplications_2_0.GetStockEntryListСледующий(_enterpriseGuid, _sp, _issuerId, _stockEntry, _параметры, пОтказ, пОшибка) Цикл
		
		_мз = РегистрыСведений.ВетисСкладскойЖурналОстатки.СоздатьМенеджерЗаписи();
		
		_мз.ХозяйствующийСубъект = пХС;
		_мз.Предприятие = пПредприятие;
		
		_мз.guid = _stockEntry.guid;
		_мз.uuid = _stockEntry.uuid;
		_мз.last = _stockEntry.last;
		
		_мз.status = _stockEntry.status;
		_мз._active = _stockEntry.active;
		_мз.entryNumber = _stockEntry.entryNumber;
		
		_мз.createDate = Ветис.ВремяМестное(_stockEntry.createDate);// xs:dateTime
		_мз.updateDate = Ветис.ВремяМестное(_stockEntry.updateDate);// xs:dateTime
		
		_мз.ProductType = _stockEntry.batch.productType;
		_мз.Product     = _stockEntry.batch.product.guid;
		_мз.SubProduct  = _stockEntry.batch.subProduct.guid;
		_мз.ProductItem = _stockEntry.batch.productItem.guid;
		
		_мз.Unit        = _stockEntry.batch.unit.guid;
		_мз.volume      = _stockEntry.batch.volume;
		
		_мз.owner = _stockEntry.batch.owner.guid;
		
		Если НЕ _stockEntry.batch.packageList = Неопределено Тогда
			//берем одну последнюю
			_package = ВетисDictionaryСлой1с.PackageList(_stockEntry.batch.packageList);
			_мз.PackingForm   = _package.packingType.guid;
			_мз.packingAmount = _package.quantity;
			
			//и текстом список упаковок
			_упаковка = "";
			Для каждого _package Из _stockEntry.batch.packageList.package Цикл
				_упаковка = _упаковка + "; " + _package.level + ") " + _package.packingType.name + " (" + _package.packingType.guid + ") " + ?(_package.quantity = 0, "", ", " + _package.quantity);
			КонецЦикла;
			_мз.package = Сред(_упаковка, 3);
		КонецЕсли;
		
		Если НЕ _stockEntry.batch.origin = Неопределено Тогда
			//берем первого
			Если _stockEntry.batch.origin.producer.Количество()>0 Тогда
				_мз.producer = _stockEntry.batch.origin.producer[0].enterprise.guid;
				_мз.producerRole = _stockEntry.batch.origin.producer[0].role;
			КонецЕсли;
			Если НЕ _stockEntry.batch.origin.productItem = Неопределено Тогда
				_мз.producerProductItem = _stockEntry.batch.origin.productItem.guid;
				_мз.producerProductItemName = _stockEntry.batch.origin.productItem.name;
			КонецЕсли;
			_мз.country = _stockEntry.batch.origin.country.guid;
		КонецЕсли;
		
		Для каждого _vetDocument Из _stockEntry.vetDocument Цикл
			_мз.vetDocument = _vetDocument.uuid;
			//берем только первый
			Прервать;
		КонецЦикла;
		
		_мз.dateOfProductionFirst = ВетисDictionary_2_0.ComplexDate(_stockEntry.batch.dateOfProduction.firstDate, Истина);
		_мз.dateOfProductionSecond = ВетисDictionary_2_0.ComplexDate(_stockEntry.batch.dateOfProduction.secondDate, Истина);
		_мз.dateOfProductionInformal = _stockEntry.batch.dateOfProduction.informalDate;
		
		_мз.expiryDateFirst = ВетисDictionary_2_0.ComplexDate(_stockEntry.batch.expiryDate.firstDate, Истина);
		_мз.expiryDateSecond = ВетисDictionary_2_0.ComplexDate(_stockEntry.batch.expiryDate.secondDate, Истина);
		_мз.expiryDateInformal = _stockEntry.batch.expiryDate.informalDate;
		
		_мз.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСправочникPackingForm() Экспорт
	
	_Версия20 = Ветис.Версия_2_0();
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("globalID", Новый ОписаниеТипов("Строка"));
	
	//Если Ветис.Версия_2_0() Тогда
		Макет = Справочники[ВетисИмяСправочника.PackingForm()].ПолучитьМакет("СписокФормУпаковок_2_0");
	//Иначе
	//	Макет = Справочники[ВетисИмяСправочника.PackingForm()].ПолучитьМакет("СписокФормУпаковок");
	//КонецЕсли;
	
	Для НомерСтроки = 1 По Макет.ВысотаТаблицы Цикл
		
		ТаблицаСтрока = _ТаблицаВетис.Добавить();
		
		ТаблицаСтрока.guid = Макет.Область(НомерСтроки, 1).Текст;
		ТаблицаСтрока.name = Макет.Область(НомерСтроки, 2).Текст;
		ТаблицаСтрока.globalID = Макет.Область(НомерСтроки, 3).Текст;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.name КАК СТРОКА(150)) КАК name,
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.globalID КАК СТРОКА(2)) КАК globalID
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка КАК Ссылка,
	|	_Таблица.Наименование КАК Наименование,
	|	_Таблица.globalID КАК _globalID,
	|	_Таблица.ПометкаУдаления,
	|	_Соответствие.guid КАК _guid,
	|	_Ветис.name КАК name,
	|	_Ветис.guid КАК guid,
	|	_Ветис.globalID КАК globalID
	|ИЗ
	|	Справочник.ВетисPackingForm КАК _Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Соответствие
	|		ПО _Таблица.Ссылка = _Соответствие.Ссылка
	|			И _Соответствие.Ссылка ССЫЛКА Справочник.ВетисPackingForm
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТаблицаВетис КАК _Ветис
	|		ПО (_Соответствие.guid = _Ветис.guid)
	//|				ИЛИ _Соответствие.guid = _Ветис.globalID)
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	_Ветис.name";
	
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		_ИзмененGuid = Ложь;
		
		Если Выборка.guid = NULL Тогда
			Если Выборка.ПометкаУдаления = Ложь Тогда
				Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
				Ветис.Журнал_Добавить("- " + Выборка.Наименование, "Ветис.PackingForm");
			КонецЕсли;
			Продолжить;
			
		ИначеЕсли ПустаяСтрока(Выборка.globalID) Тогда
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ НЕ Выборка.Наименование = СокрЛП(Выборка.name)
			ИЛИ НЕ Выборка._globalID = СокрЛП(Выборка.globalID)
			ИЛИ Выборка.ПометкаУдаления;
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = Справочники[ВетисИмяСправочника.PackingForm()].СоздатьЭлемент();
				Ветис.Журнал_Добавить("+ " + СокрЛП(Выборка.name), "Ветис.PackingForm");
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
				_Элемент.ПометкаУдаления = Ложь;
				Ветис.Журнал_Добавить("~ " + СокрЛП(Выборка.name), "Ветис.PackingForm");
			КонецЕсли;
			
			_Элемент.Наименование  = СокрЛП(Выборка.name);
			_Элемент.globalID  = СокрЛП(Выборка.globalID);
			
			Попытка
				_Элемент.Записать();
			Исключение
				ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), "Ветис.PackingForm");
				ВызватьИсключение;
			КонецПопытки;
			
			Ветис.Соответствие_Добавить(_Элемент.Ссылка, Выборка.guid, СокрЛП(Выборка.name));
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьСправочникPurpose(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_ВетисDictionaryService = ?(Ветис.Версия_2_0(), ВетисDictionaryService_2_0, ВетисDictionaryService);
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("forSubstandard", Новый ОписаниеТипов("Булево"));
	
	_Выборка = Неопределено; _параметры = Неопределено;
	Пока _ВетисDictionaryService.GetPurposeListСледующий(_Выборка, _параметры) Цикл
		ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _Выборка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.name КАК СТРОКА(150)) КАК name,
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.forSubstandard КАК БУЛЕВО) КАК forSubstandard
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка КАК Ссылка,
	|	_Таблица.Наименование КАК Наименование,
	|	_Таблица.НекачественныйГруз КАК НекачественныйГруз,
	|	_Ветис.name КАК name,
	|	_Ветис.guid КАК guid,
	|	_Ветис.forSubstandard КАК forSubstandard
	|ИЗ
	|	ВТаблицаВетис КАК _Ветис
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ВетисPurpose КАК _Таблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Соответствие
	|			ПО _Таблица.Ссылка = _Соответствие.Ссылка
	|				И _Соответствие.Ссылка ССЫЛКА Справочник.ВетисPurpose
	|		ПО (_Ветис.guid = _Соответствие.guid)
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	name";
	
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.guid = NULL Тогда
			Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Ветис.Журнал_Добавить("- " + Выборка.Наименование, "Ветис.Purpose");
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ НЕ Выборка.Наименование = СокрЛП(Выборка.name)
			ИЛИ НЕ Выборка.НекачественныйГруз = Выборка.forSubstandard;
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = Справочники[ВетисИмяСправочника.Purpose()].СоздатьЭлемент();
				Ветис.Журнал_Добавить("+ " + СокрЛП(Выборка.name), "Ветис.Purpose");
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
				Ветис.Журнал_Добавить("~ " + СокрЛП(Выборка.name), "Ветис.Purpose");
			КонецЕсли;
			
			//_Элемент.guid          = СокрЛП(Выборка.guid);
			_Элемент.Наименование  = СокрЛП(Выборка.name);
			//_Элемент.ДатаИзменения = ТекущаяДата();
			_Элемент.НекачественныйГруз = Выборка.forSubstandard;
			
			Попытка
				_Элемент.Записать();
				
				Ветис.Соответствие_Добавить(_Элемент.Ссылка, Выборка.guid, Выборка.name);
				
			Исключение
				ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), "Ветис.Purpose");
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСправочникRegionalizationCondition(пЗаболевание = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если НЕ Ветис.Версия_2_0() Тогда
		пОтказ = Истина;
		пОшибка = "Только начиная с версии 2.0";
		Возврат;
	КонецЕсли;
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("referenceNumber", Новый ОписаниеТипов("Число"));
	_ТаблицаВетис.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("text", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("strict", Новый ОписаниеТипов("Булево"));
	_ТаблицаВетис.Колонки.Добавить("relatedDiseaseGuid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("relatedDisease", Новый ОписаниеТипов("Строка"));
	
	_Заболевание = ВетисDictionaryСлой1с.AnimalDisease(пЗаболевание);
	_Условие = Неопределено; _параметры = Неопределено;
	Пока ВетисRegionalizationService_2_0.GetR13nConditionListСледующий(_Заболевание, _Условие, _параметры, пОтказ, пОшибка) Цикл
		_Строка = _ТаблицаВетис.Добавить();
		_Строка.referenceNumber = _Условие.referenceNumber;
		_Строка.guid            = _Условие.guid;
		_Строка.text            = _Условие.text;
		_Строка.strict          = _Условие.strict;
		//сделать: переделать заболевания на список или таблицу
		_Строка.relatedDiseaseGuid  = ?(_Условие.relatedDisease.Количество()=0, "", _Условие.relatedDisease[0].guid);
		_Строка.relatedDisease  = ?(_Условие.relatedDisease.Количество()=0, "", _Условие.relatedDisease[0].name);
	КонецЦикла;
	
	Если пОтказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.referenceNumber КАК ЧИСЛО) КАК referenceNumber,
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.text КАК СТРОКА(255)) КАК text,
	|	ВЫРАЗИТЬ(_Таблица.strict КАК БУЛЕВО) КАК strict,
	|	ВЫРАЗИТЬ(_Таблица.relatedDiseaseGuid КАК СТРОКА(36)) КАК relatedDiseaseGuid,
	|	ВЫРАЗИТЬ(_Таблица.relatedDisease КАК СТРОКА(255)) КАК relatedDisease
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка КАК Ссылка,
	|	_Таблица.Ссылка.Наименование КАК Наименование,
	|	_Таблица.Ссылка.НомерУсловия КАК НомерУсловия,
	|	_Таблица.Ссылка.ФормулировкаУсловия КАК ФормулировкаУсловия,
	|	_Таблица.Ссылка.Обязательность КАК Обязательность,
	|	_Таблица.Ссылка.Заболевание КАК Заболевание,
	|	_Заболевание.Ссылка КАК СоответствиеЗаболевание,
	|	_Ветис.referenceNumber КАК referenceNumber,
	|	_Ветис.guid КАК guid,
	|	_Ветис.text КАК text,
	|	_Ветис.strict КАК strict,
	|	_Ветис.relatedDiseaseGuid КАК relatedDiseaseGuid,
	|	_Ветис.relatedDisease КАК relatedDisease
	|ИЗ
	|	ВТаблицаВетис КАК _Ветис
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ВетисRegionalizationCondition КАК _Таблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Соответствие
	|			ПО _Таблица.Ссылка = _Соответствие.Ссылка
	|				И _Соответствие.Ссылка ССЫЛКА Справочник.ВетисRegionalizationCondition
	|		ПО (_Ветис.guid = _Соответствие.guid)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Заболевание
	|		ПО _Ветис.relatedDiseaseGuid = _Заболевание.guid
	|			И (_Заболевание.Ссылка ССЫЛКА Справочник.ВетисAnimalDisease)
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	text";
	
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_СоответствиеЗаболевание = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СоответствиеЗаболевание = NULL Тогда
			_Заболевание = _СоответствиеЗаболевание.Получить(Выборка.relatedDiseaseGuid);
			Если _Заболевание = Неопределено И ЗначениеЗаполнено(Выборка.relatedDiseaseGuid) Тогда
				_Заболевание = ВетисDictionaryСлой1с.AnimalDisease(Новый Структура("guid,name", Выборка.relatedDiseaseGuid, Выборка.relatedDisease));
				_СоответствиеЗаболевание.Вставить(Выборка.relatedDiseaseGuid, _Заболевание)
				//_Элемент = Справочники.ВетисAnimalDisease.СоздатьЭлемент();
				//_Элемент.Наименование = Выборка.relatedDisease;
				//Попытка
				//	_Элемент.Записать();
				//	_Заболевание = _Элемент.Ссылка;
				//	_СоответствиеЗаболевание.Вставить(Выборка.relatedDiseaseGuid, _Элемент.Ссылка);
				//	Ветис.Соответствие_Добавить(_Элемент.Ссылка, Выборка.relatedDiseaseGuid, Выборка.relatedDisease);
				//	Ветис.Журнал_Добавить("+ " + СокрЛП(Выборка.relatedDisease), "Ветис.AnimalDisease");
				//Исключение
				//	ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), "Ветис.AnimalDisease");
				//КонецПопытки;
			КонецЕсли;
		Иначе
			_Заболевание = Выборка.СоответствиеЗаболевание;
		КонецЕсли;
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.guid = NULL Тогда
			Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Ветис.Журнал_Добавить("- " + Выборка.relatedDisease, "Ветис.RegionalizationCondition");
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ НЕ Выборка.НомерУсловия = СокрЛП(Выборка.referenceNumber)
			ИЛИ НЕ Выборка.ФормулировкаУсловия = Выборка.text
			ИЛИ НЕ Выборка.Обязательность = Выборка.strict
			ИЛИ НЕ Выборка.Заболевание = _Заболевание;
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = Справочники.ВетисRegionalizationCondition.СоздатьЭлемент();
				Ветис.Журнал_Добавить("+ " + СокрЛП(Выборка.text), "Ветис.RegionalizationCondition");
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
				Ветис.Журнал_Добавить("~ " + СокрЛП(Выборка.text), "Ветис.RegionalizationCondition");
			КонецЕсли;
			
			_Элемент.НомерУсловия        = Выборка.referenceNumber;
			_Элемент.Наименование        = СокрЛП(Выборка.text);
			_Элемент.ФормулировкаУсловия = СокрЛП(Выборка.text);
			_Элемент.Обязательность      = Выборка.strict;
			_Элемент.Заболевание         = _СоответствиеЗаболевание;
			
			Попытка
				_Элемент.Записать();
				
				Ветис.Соответствие_Добавить(_Элемент.Ссылка, Выборка.guid, Выборка.referenceNumber);
				
			Исключение
				ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), "Ветис.RegionalizationCondition");
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСправочникRegion(пСтрана, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Страна = пСтрана;
	
	_countryGuid = ?(Ветис.Версия_2_0(), ВетисDictionaryСлой1с, ВетисIkarСлой1с).Country(_Страна);
	
	Если НЕ ЗначениеЗаполнено(_countryGuid) Тогда
		пОтказ = Истина;
		пОшибка = "Заполнение справочника ""Регионы"": нет сопоставления страны.";
		Возврат;
	КонецЕсли;
	
	_Service = ?(Ветис.Версия_2_0(), ВетисIkarService_2_0, ВетисIkarService);
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("regionCode", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("type", Новый ОписаниеТипов("Строка"));
	
	_Выборка = Неопределено; _параметры = Неопределено;
	Пока _Service.GetRegionListByCountryСледующий(_countryGuid, _Выборка, _параметры, пОтказ, пОшибка) Цикл
		ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _Выборка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.name КАК СТРОКА(150)) КАК name,
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.regionCode КАК СТРОКА(10)) КАК regionCode,
	|	ВЫРАЗИТЬ(_Таблица.type КАК СТРОКА(10)) КАК type
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка КАК Ссылка,
	|	_Таблица.Наименование КАК Наименование,
	|	_Соответствие.guid КАК guid
	|ПОМЕСТИТЬ ВСправочник
	|ИЗ
	|	Справочник.ВетисRegion КАК _Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Соответствие
	|		ПО _Таблица.Ссылка = _Соответствие.Ссылка
	|			И _Соответствие.Ссылка ССЫЛКА Справочник.ВетисRegion
	|ГДЕ
	|	ИСТИНА
	|	И _Таблица.Страна = &Страна
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка КАК Ссылка,
	|	_Таблица.Наименование КАК Наименование,
	|	_Ветис.name КАК name,
	|	_Ветис.guid КАК guid,
	|	_Ветис.regionCode КАК regionCode,
	|	_Ветис.type КАК type
	|ИЗ
	|	ВТаблицаВетис КАК _Ветис
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВСправочник КАК _Таблица
	|		ПО _Ветис.guid = _Таблица.guid
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	name";
	
	Запрос.УстановитьПараметр("Страна", _Страна);
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.guid = NULL Тогда
			Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Ветис.Журнал_Добавить("- " + Выборка.Наименование, "Ветис.Region");
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ НЕ Выборка.Наименование = СокрЛП(Выборка.name);
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = Справочники[ВетисИмяСправочника.Region()].СоздатьЭлемент();
				Ветис.Журнал_Добавить("+ " + СокрЛП(Выборка.name), "Ветис.Region");
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
				Ветис.Журнал_Добавить("~ " + СокрЛП(Выборка.name), "Ветис.Region");
			КонецЕсли;
			
			_Элемент.Наименование  = СокрЛП(Выборка.name);
			_Элемент.Страна        = _Страна;
			_Элемент.КодРегиона    = СокрЛП(Выборка.regionCode);
			_Элемент.Тип           = СокрЛП(Выборка.type);
			
			Попытка
				_Элемент.Записать();
				
				Ветис.Соответствие_Добавить(_Элемент.Ссылка, Выборка.guid, Выборка.name);
				
			Исключение
				ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), "Ветис.Region");
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСправочникDistrict(пСтрана, пРегион = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Страна = пСтрана;
	
	_countryGuid = ?(Ветис.Версия_2_0(), ВетисDictionaryСлой1с, ВетисIkarСлой1с).Country(_Страна);
	
	Если НЕ ЗначениеЗаполнено(_countryGuid) Тогда
		пОтказ = Истина;
		пОшибка = "Заполнение справочника ""Районы"": нет сопоставления страны.";
		Возврат;
	КонецЕсли;
	
	_Версия20 = Ветис.Версия_2_0();
	
	_Service = ?(_Версия20, ВетисIkarService_2_0, ВетисIkarService);
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("regionGuid", Новый ОписаниеТипов("Строка"));
	
	Если пРегион = Неопределено Тогда
		_region = Неопределено; _параметрыР = Неопределено;
		Пока _Service.GetRegionListByCountryСледующий(_countryGuid, _region, _параметрыР) Цикл
			_district = Неопределено; _параметры = Неопределено;
			Пока _Service.GetDistrictListByRegionСледующий(_region.guid, _district, _параметры) Цикл
				ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _district);
			КонецЦикла;
		КонецЦикла;
	Иначе
		_regionGuid = ?(_Версия20, ВетисDictionaryСлой1с, ВетисIkarСлой1с).Region(пРегион);
		Если НЕ ЗначениеЗаполнено(_regionGuid) Тогда
			пОтказ = Истина;
			пОшибка = "Заполнение справочника ""Районы"": нет сопоставления региона.";
			Возврат;
		КонецЕсли;
		_district = Неопределено; _параметры = Неопределено;
		Пока _Service.GetDistrictListByRegionСледующий(_regionGuid, _district, _параметры) Цикл
			ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _district);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.name КАК СТРОКА(150)) КАК name,
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.regionGuid КАК СТРОКА(36)) КАК regionGuid
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка КАК Ссылка,
	|	_Таблица.Наименование КАК Наименование,
	|	_Соответствие.guid КАК guid
	|ПОМЕСТИТЬ ВСправочник
	|ИЗ
	|	Справочник.ВетисDistrict КАК _Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Соответствие
	|		ПО _Таблица.Ссылка = _Соответствие.Ссылка
	|			И _Соответствие.Ссылка ССЫЛКА Справочник.ВетисDistrict
	|ГДЕ
	|	ИСТИНА
	|	И _Таблица.Страна = &Страна
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ Различные
	|	_Таблица.Ссылка КАК Ссылка,
	|	_Таблица.Наименование КАК Наименование,
	|	_Ветис.name КАК name,
	|	_Ветис.guid КАК guid,
	|	_Ветис.regionGuid КАК regionGuid,
	|	_Регион.Ссылка КАК Регион
	|ИЗ
	|	ВТаблицаВетис КАК _Ветис
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВСправочник КАК _Таблица
	|		ПО _Ветис.guid = _Таблица.guid
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Регион
	|		ПО _Ветис.regionGuid = _Регион.guid
	|			И _Регион.Ссылка ССЫЛКА Справочник.ВетисRegion
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	name";
	
	Запрос.УстановитьПараметр("Страна", _Страна);
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.guid = NULL Тогда
			Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Ветис.Журнал_Добавить("- " + Выборка.Наименование, "Ветис.District");
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ НЕ Выборка.Наименование = СокрЛП(Выборка.name);
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = Справочники[ВетисИмяСправочника.District()].СоздатьЭлемент();
				Ветис.Журнал_Добавить("+ " + СокрЛП(Выборка.name), "Ветис.District");
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
				Ветис.Журнал_Добавить("~ " + СокрЛП(Выборка.name), "Ветис.District");
			КонецЕсли;
			//Справочники.ВетисDistrict.НайтиПоНаименованию(СокрЛП(Выборка.name))
			_Элемент.Наименование  = СокрЛП(Выборка.name);
			_Элемент.Страна        = _Страна;
			_Элемент.Регион        = Выборка.Регион;
			
			Попытка
				_Элемент.Записать();
				
				Ветис.Соответствие_Добавить(_Элемент.Ссылка, Выборка.guid, Выборка.name);
				
			Исключение
				ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), "Ветис.District");
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСправочникLocality(пСтрана, пРегион = Неопределено, пРайон = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Версия20 = Ветис.Версия_2_0();
	
	_countryGuid = ?(_Версия20, ВетисDictionaryСлой1с, ВетисIkarСлой1с).Country(пСтрана);
	
	Если НЕ ЗначениеЗаполнено(_countryGuid) Тогда
		пОтказ = Истина;
		пОшибка = "Заполнение справочника ""Населенные пункты"": нет сопоставления страны.";
		Возврат;
	КонецЕсли;
	
	_Service = ?(_Версия20, ВетисIkarService_2_0, ВетисIkarService);
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("view", Новый ОписаниеТипов("Строка"));
	//_ТаблицаВетис.Колонки.Добавить("regionCode", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("regionGuid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("districtGuid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("countryGuid", Новый ОписаниеТипов("Строка"));
	//_ТаблицаВетис.Колонки.Добавить("cityGuid", Новый ОписаниеТипов("Строка"));
	//_ТаблицаВетис.Колонки.Добавить("hasStreets", Новый ОписаниеТипов("Строка"));
	
	Если пРегион = Неопределено Тогда
		_region = Неопределено; _параметрыR = Неопределено;
		Пока _Service.GetRegionListByCountryСледующий(_countryGuid, _region, _параметрыR) Цикл
			_locality = Неопределено; _параметры = Неопределено;
			Пока _Service.GetLocalityListByRegionСледующий(_region.Guid, _locality, _параметры) Цикл
				_locality.regionGuid = _region.Guid;
				ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _locality);
			КонецЦикла;
			Если пРайон = Неопределено Тогда
				_district = Неопределено; _параметрыD = Неопределено;
				Пока _Service.GetDistrictListByRegionСледующий(_region.guid, _district, _параметрыD) Цикл
					_locality = Неопределено; _параметры = Неопределено;
					Пока _Service.GetLocalityListByDistrictСледующий(_district.Guid, _locality, _параметры) Цикл
						ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _locality);
					КонецЦикла;
				КонецЦикла;
			Иначе
				_districtGuid = ?(_Версия20, ВетисDictionaryСлой1с, ВетисIkarСлой1с).District(пРайон);
				_locality = Неопределено; _параметры = Неопределено;
				Пока _Service.GetLocalityListByDistrictСледующий(_districtGuid, _locality, _параметры) Цикл
					ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _locality);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе
		
		_regionGuid = ?(_Версия20, ВетисDictionaryСлой1с, ВетисIkarСлой1с).Region(пРегион);
		
		Если НЕ ЗначениеЗаполнено(_regionGuid) Тогда
			пОтказ = Истина;
			пОшибка = "Заполнение справочника ""Населенные пункты"": нет сопоставления региона.";
			Возврат;
		КонецЕсли;
		
		Если пРайон = Неопределено Тогда
			
			_locality = Неопределено; _параметры = Неопределено;
			Пока _Service.GetLocalityListByRegionСледующий(_regionGuid, _locality, _параметры) Цикл
				_locality.regionGuid = _regionGuid;
				ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _locality);
			КонецЦикла;
			
			_district = Неопределено; _параметрыD = Неопределено;
			Пока _Service.GetDistrictListByRegionСледующий(_regionGuid, _district, _параметрыD) Цикл
				_locality = Неопределено; _параметры = Неопределено;
				Пока _Service.GetLocalityListByDistrictСледующий(_district.Guid, _locality, _параметры) Цикл
					_locality.regionGuid = _regionGuid;
					_locality.districtGuid = _district.Guid;
					ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _locality);
				КонецЦикла;
			КонецЦикла;
		Иначе
			_districtGuid = ?(_Версия20, ВетисDictionaryСлой1с, ВетисIkarСлой1с).District(пРайон);
			_locality = Неопределено; _параметры = Неопределено;
			Пока _Service.GetLocalityListByDistrictСледующий(_districtGuid, _locality, _параметры) Цикл
				_locality.regionGuid = _regionGuid;
				_locality.districtGuid = _districtGuid;
				ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _locality);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.name КАК СТРОКА(150)) КАК name,
	|	ВЫРАЗИТЬ(_Таблица.view КАК СТРОКА(255)) КАК view,
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.districtGuid КАК СТРОКА(36)) КАК districtGuid,
	|	ВЫРАЗИТЬ(_Таблица.regionGuid КАК СТРОКА(36)) КАК regionGuid,
	|	ВЫРАЗИТЬ(_Таблица.countryGuid КАК СТРОКА(36)) КАК countryGuid
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка КАК Ссылка,
	|	_Таблица.Наименование КАК Наименование,
	|	_Таблица.Представление КАК Представление,
	|	_Соответствие.guid КАК guid
	|ПОМЕСТИТЬ ВСправочник
	|ИЗ
	|	Справочник.ВетисLocality КАК _Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Соответствие
	|		ПО _Таблица.Ссылка = _Соответствие.Ссылка
	|			И _Соответствие.Ссылка ССЫЛКА Справочник.ВетисLocality
	|ГДЕ
	|	ИСТИНА
	|//о1	И _Таблица.Регион = &Регион
	|//о2	И _Таблица.Район = &Район
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ Различные
	|	_Таблица.Ссылка КАК Ссылка,
	|	_Таблица.Наименование КАК Наименование,
	|	_Таблица.Представление КАК Представление,
	|	_Ветис.name КАК name,
	|	_Ветис.view КАК view,
	|	_Ветис.guid КАК guid,
	|	_Район.Ссылка КАК Район,
	|	_Регион.Ссылка КАК Регион
	|ИЗ
	|	ВТаблицаВетис КАК _Ветис
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Район
	|		ПО _Ветис.districtGuid = _Район.guid
	|			И _Район.Ссылка ССЫЛКА Справочник.ВетисDistrict
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Регион
	|		ПО _Ветис.regionGuid = _Регион.guid
	|			И _Регион.Ссылка ССЫЛКА Справочник.ВетисRegion
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВСправочник КАК _Таблица
	|		ПО _Ветис.guid = _Таблица.guid
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	name";
	
	Запрос.УстановитьПараметр("Регион", пРегион);
	Запрос.УстановитьПараметр("Район", пРайон);
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Если НЕ пРегион = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о1", "");
	КонецЕсли;
	
	Если НЕ пРайон = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о2", "");
	КонецЕсли;
	
	//Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.guid = NULL Тогда
			Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Ветис.Журнал_Добавить("- " + Выборка.Наименование, "Ветис.District");
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ НЕ Выборка.Наименование = СокрЛП(Выборка.name)
			ИЛИ НЕ Выборка.Представление = СокрЛП(Выборка.view);
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = Справочники.ВетисLocality.СоздатьЭлемент();
				Ветис.Журнал_Добавить("+ " + СокрЛП(Выборка.name), "Ветис.Locality");
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
				Ветис.Журнал_Добавить("~ " + СокрЛП(Выборка.name), "Ветис.Locality");
			КонецЕсли;
			
			_Элемент.Наименование = СокрЛП(Выборка.name);
			_Элемент.Представление = СокрЛП(Выборка.view);
			_Элемент.Район        = Выборка.Район;
			_Элемент.Регион       = Выборка.Регион;
			_Элемент.Страна       = пСтрана;
			
			Попытка
				_Элемент.Записать();
				
				Ветис.Соответствие_Добавить(_Элемент.Ссылка, Выборка.guid, Выборка.name);
				
			Исключение
				ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), "Ветис.Locality");
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСправочникIncorporationForm() Экспорт
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("code", Новый ОписаниеТипов("Строка"));
	
	_Макет = Справочники[ВетисИмяСправочника.IncorporationForm()].ПолучитьМакет("ОК_028_2012");
	
	Для _НомерСтроки = 1 По _Макет.ВысотаТаблицы Цикл
		
		_ТаблицаСтрока = _ТаблицаВетис.Добавить();
		
		_ТаблицаСтрока.name = _Макет.Область(_НомерСтроки, 3).Текст;
		_ТаблицаСтрока.code = _Макет.Область(_НомерСтроки, 2).Текст;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.name КАК СТРОКА(150)) КАК name,
	|	ВЫРАЗИТЬ(_Таблица.code КАК СТРОКА(5)) КАК code
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Справочник.Ссылка КАК Ссылка,
	|	_Справочник.Наименование,
	|	_Справочник.Код,
	|	_Ветис.name КАК name,
	|	_Ветис.code КАК code
	|ИЗ
	|	ВТаблицаВетис КАК _Ветис
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ВетисIncorporationForm КАК _Справочник
	|		ПО _Ветис.code = _Справочник.Код
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	_Ветис.name";
	
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.code = NULL Тогда
			Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Ветис.Журнал_Добавить("- " + Выборка.Наименование, "Ветис.IncorporationForm");
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ НЕ Выборка.Наименование = СокрЛП(Выборка.name)
			ИЛИ НЕ Выборка.Код = СокрЛП(Выборка.code);
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = Справочники[ВетисИмяСправочника.IncorporationForm()].СоздатьЭлемент();
				Ветис.Журнал_Добавить("+ " + СокрЛП(Выборка.name), "Ветис.IncorporationForm");
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
				Ветис.Журнал_Добавить("~ " + СокрЛП(Выборка.name), "Ветис.IncorporationForm");
			КонецЕсли;
			
			_Элемент.Наименование  = СокрЛП(Выборка.name);
			_Элемент.Код  = СокрЛП(Выборка.code);
			
			Попытка
				_Элемент.Записать();
			Исключение
				ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), "Ветис.IncorporationForm");
			КонецПопытки;
			
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьСправочникПродукции() Экспорт
	
	Перем _product, _subProduct;
	
	_нз = РегистрыСведений.ВетисСправочникПродукции.СоздатьНаборЗаписей();
	
	Если Ветис.Версия_2_0() Тогда
		Для каждого _ТипПродукции Из Перечисления.ВетисProductType Цикл
			_productType = ВетисDictionaryСлой1с.ProductType(_ТипПродукции);
			_нз.Отбор.ProductType.Установить(_productType);
			_параметрыP = Новый Структура("ИзСервиса");
			Пока ВетисProductService_2_0.GetProductByTypeListСледующий(_productType, _product, _параметрыP) Цикл
				_нз.Очистить();
				_нз.Отбор.Product.Установить(_product.guid);
				_параметрыS = Новый Структура("ИзСервиса");
				Пока ВетисProductService_2_0.GetSubProductByProductListСледующий(_product.guid, _subProduct, _параметрыS) Цикл
					_нзСтрока = _нз.Добавить();
					_нзСтрока.ProductType = _ProductType;
					_нзСтрока.Product = _product.guid;
					_нзСтрока.ProductName = _product.name;
					_нзСтрока.SubProduct = _subProduct.guid;
					_нзСтрока.SubProductName = _subProduct.name;
				КонецЦикла;
				_нз.Записать();
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для каждого _ТипПродукции Из Перечисления.ВетисProductType Цикл
			_productType = ВетисArgusProductionСлой1с.ProductType(_ТипПродукции);
			_нз.Отбор.ProductType.Установить(_productType);
			_параметрыP = Новый Структура("ИзСервиса");
			Пока ВетисProductService.GetProductByTypeListСледующий(_productType, _product, _параметрыP) Цикл
				_нз.Очистить();
				_нз.Отбор.Product.Установить(_product.guid);
				_параметрыS = Новый Структура("ИзСервиса");
				Пока ВетисProductService.GetSubProductByProductListСледующий(_product.guid, _subProduct, _параметрыS) Цикл
					_нзСтрока = _нз.Добавить();
					_нзСтрока.ProductType = _ProductType;
					_нзСтрока.Product = _product.guid;
					_нзСтрока.ProductName = _product.name;
					_нзСтрока.SubProduct = _subProduct.guid;
					_нзСтрока.SubProductName = _subProduct.name;
				КонецЦикла;
				_нз.Записать();
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция GetSubProductByGuid(guid, ПоУмолчанию = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ Первые 1
	|	_Таблица.ProductType,
	|	_Таблица.Product,
	|	_Таблица.SubProduct,
	|	_Таблица.ProductName,
	|	_Таблица.SubProductName
	|ИЗ
	|	РегистрСведений.ВетисСправочникПродукции КАК _Таблица
	|ГДЕ
	|	_Таблица.SubProduct = &guid";
	
	Запрос.УстановитьПараметр("guid", guid);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("guid, name, ProductType, productGuid", Выборка.SubProduct, Выборка.SubProductName, Выборка.ProductType, Выборка.Product);
	КонецЕсли;
	
	Возврат Новый Структура("guid, name, ProductType, productGuid");
	
КонецФункции

Функция GetProductByGuid(guid, ПоУмолчанию = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ Первые 1
	|	_Таблица.ProductType,
	|	_Таблица.Product,
	|	_Таблица.ProductName
	|ИЗ
	|	РегистрСведений.ВетисСправочникПродукции КАК _Таблица
	|ГДЕ
	|	_Таблица.Product = &guid";
	
	Запрос.УстановитьПараметр("guid", guid);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("guid, name, ProductType", Выборка.Product, Выборка.ProductName, Выборка.ProductType);
	КонецЕсли;
	
	Возврат Новый Структура("guid, name, ProductType");
	
КонецФункции
