
//единая точка входа
//вызывается из МодульУправляемогоПриложения.ПередНачаломРаботыСистемы или МодульОбычногоПриложения.ПередНачаломРаботыСистемы
Процедура Инициализировать() Экспорт
	
	#Если НЕ МобильноеПриложениеСервер Тогда
		Если НЕ РольДоступна("ВетисПользователь") Тогда
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	ИнициализироватьПеременные();
	
	ИнициализироватьНастройки();
	
	ИнициализироватьНастройкиХС();
	
	ИнициализироватьXSD();
	
КонецПроцедуры

//Устанавливает параметры соединения для заданного или основного ХС
Процедура ИнициализироватьНастройкиХС(пХС = Неопределено) Экспорт
	
	Если пХС = Неопределено Тогда
		_ХС = Настройки_ОсновнойХС();
		
		Если _ХС = ТекущийХС() Тогда
			Возврат;
		КонецЕсли;
		
		_issuerId = ?(Версия_2_0(), ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с).BusinessEntity(_ХС);
		
	ИначеЕсли ТипЗнч(пХС) = Тип(ВетисИмяСправочника.BusinessEntity("СправочникСсылка")) Тогда
		Если пХС = ТекущийХС() Тогда
			Возврат;
		Иначе
			_ХС = пХС;
			_issuerId = ?(Версия_2_0(), ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с).BusinessEntity(пХС);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(пХС) = Тип("Строка") И НЕ ПустаяСтрока(пХС) Тогда
		Если пХС = issuerId() Тогда
			Возврат;
		Иначе
			_ХС = ?(Версия_2_0(), ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с).BusinessEntity(пХС);
			_issuerId = пХС;
		КонецЕсли;
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	_Настройки = РегистрыСведений.ВетисНастройкиХС.СоздатьМенеджерЗаписи();
	
	_Настройки.ХозяйствующийСубъект = _ХС;
	
	_Настройки.Прочитать();
	
	Переменные_Установить("ВетисЛогин",          _Настройки.Логин);
	Переменные_Установить("ВетисПароль",         _Настройки.Пароль);
	Переменные_Установить("ВетисЛогинВрача",     _Настройки.ЛогинВрача);
	Переменные_Установить("ВетисВрач",           _Настройки.Врач);
	Переменные_Установить("ВетисДолжностьВрача", _Настройки.ДолжностьВрача);
	
	Переменные_Установить("ВетисКлючАПИ",        _Настройки.КлючАПИ);
	
	Переменные_Установить("ВетисХС", _ХС);
	Переменные_Установить("ВетисИдентификаторХС", _issuerId);
	
	ИнициализироватьНастройкиПользователя(_ХС);
	
КонецПроцедуры

Функция ПолучитьНастройкиХС(пХС = Неопределено) Экспорт
	
	_Настройки = Новый Структура;
	
	Если пХС = Неопределено Тогда
		_ХС = ТекущийХС();
		_issuerId = ?(Версия_2_0(), ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с).BusinessEntity(_ХС);
		
	ИначеЕсли ТипЗнч(пХС) = Тип(ВетисИмяСправочника.BusinessEntity("СправочникСсылка")) Тогда
		_ХС = пХС;
		_issuerId = ?(Версия_2_0(), ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с).BusinessEntity(пХС);
		
	ИначеЕсли ТипЗнч(пХС) = Тип("Строка") И НЕ ПустаяСтрока(пХС) Тогда
		_ХС = ?(Версия_2_0(), ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с).BusinessEntity(пХС);
		_issuerId = пХС;
		
	КонецЕсли;
	
	_Настройки.Вставить("issuerId", _issuerId);
	
	Если _ХС = ТекущийХС() Тогда
		_Настройки.Вставить("КлючАПИ",  КлючАПИ());
		_Настройки.Вставить("Логин",    Логин());
		_Настройки.Вставить("Пароль",   Пароль());
		
	Иначе
		_мз = РегистрыСведений.ВетисНастройкиХС.СоздатьМенеджерЗаписи();
		
		_мз.ХозяйствующийСубъект = _ХС;
		
		_мз.Прочитать();
		
		_Настройки.Вставить("КлючАПИ",  _мз.КлючАПИ);
		_Настройки.Вставить("Логин",    _мз.Логин);
		_Настройки.Вставить("Пароль",   _мз.Пароль);
	КонецЕсли;
	
	Возврат _Настройки;
	
КонецФункции

Процедура ИнициализироватьНастройкиПользователя(пХС = Неопределено)
	
	_мз = РегистрыСведений.ВетисПользователи.СоздатьМенеджерЗаписи();
	_мз.Пользователь = Пользователи.ТекущийПользователь();
	_мз.ХозяйствующийСубъект = ?(пХС = Неопределено, ТекущийХС(), пХС);
	
	_мз.Прочитать();
	
	Если _мз.Выбран() Тогда
		Переменные_Установить("ВетисЛогинХС",  _мз.Логин);
	Иначе
		Переменные_Установить("ВетисЛогинХС",  "");
	КонецЕсли;
	
КонецПроцедуры


#Область ПараметрыСоединения

Функция Логин() Экспорт
	Возврат Переменные_Получить("ВетисЛогин");
КонецФункции

Функция Пароль() Экспорт
	Возврат Переменные_Получить("ВетисПароль");
КонецФункции

Функция КлючАПИ() Экспорт
	Возврат Переменные_Получить("ВетисКлючАПИ");
КонецФункции

Функция serviceId() Экспорт
	Возврат Строка(Настройки_Сервис()) + ВерсияПредставление(":");
КонецФункции

Функция ЛогинВрача() Экспорт
	Возврат Переменные_Получить("ВетисЛогинВрача");
КонецФункции

Функция Врач() Экспорт
	Если Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.User(ЛогинВрача(), Переменные_Получить("ВетисВрач"), Переменные_Получить("ВетисДолжностьВрача"));
	Иначе
		Возврат ВетисArgusCommon.User(ЛогинВрача(), Переменные_Получить("ВетисВрач"), Переменные_Получить("ВетисДолжностьВрача"));
	КонецЕсли;
КонецФункции

Функция ТекущийХС() Экспорт
	Возврат Переменные_Получить("ВетисХС");
КонецФункции

Функция ТекущееПредприятие(пЗначение = Неопределено) Экспорт
	Если пЗначение = Неопределено Тогда
		Возврат Переменные_Получить("ТекущееПредприятие", Справочники.ВетисПредприятия.ПустаяСсылка());
	Иначе
		Переменные_Установить("ТекущееПредприятие", пЗначение);
	КонецЕсли;
КонецФункции

//логин пользователя ХС
Функция ЛогинХС() Экспорт
	Возврат Переменные_Получить("ВетисЛогинХС");
КонецФункции

Функция issuerId(пХС = Неопределено) Экспорт
	
	Если пХС = Неопределено ИЛИ пХС = ТекущийХС() Тогда
		Возврат Переменные_Получить("ВетисИдентификаторХС");
	Иначе
		Если Версия_2_0() Тогда
			Возврат ВетисDictionaryСлой1с.BusinessEntity(пХС);
		Иначе
			Возврат ВетисCerberusEnterpriseСлой1с.BusinessEntity(пХС);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Соответствие

//Ссылка на справочник по Guid
Функция Соответствие_ПолучитьСсылку(guid, пТип, ПоУмолчанию = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	_Таблица.Ссылка
	|ИЗ
	|	РегистрСведений.ВетисСоответствие КАК _Таблица
	|ГДЕ
	|	_Таблица.guid = &guid
	|	И _Таблица.Ссылка ССЫЛКА {Тип}
	|	И ИСТИНА";
	
	Запрос.УстановитьПараметр("guid", guid);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "{Тип}", пТип);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат ПоУмолчанию;
	КонецЕсли;
	
КонецФункции

//Guid по ссылка на справочник
Функция Соответствие_ПолучитьGuid(пСсылка, ПоУмолчанию = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	_Таблица.guid
	|ИЗ
	|	РегистрСведений.ВетисСоответствие КАК _Таблица
	|ГДЕ
	|	_Таблица.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", пСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.guid;
	Иначе
		Возврат ПоУмолчанию;
	КонецЕсли;
	
КонецФункции

//Добавление связи
Процедура Соответствие_Добавить(пСсылка, guid, name = "", пОписание = "") Экспорт
	
	Если ПустаяСтрока(guid) Тогда
		Возврат;
	КонецЕсли;
	
	мз = РегистрыСведений.ВетисСоответствие.СоздатьМенеджерЗаписи();
	
	мз.Ссылка = пСсылка;
	мз.guid   = guid;
	мз.name   = СокрЛП(name);
	мз.Описание = СокрЛП(пОписание);
	
	мз.Записать();
	
КонецПроцедуры

//Удаление связи
Процедура Соответствие_Удалить(пСсылка, пТип = Неопределено) Экспорт
	
	мз = РегистрыСведений.ВетисСоответствие.СоздатьМенеджерЗаписи();
	
	мз.Ссылка = ?(ТипЗнч(пСсылка) = Тип("Строка"), Соответствие_ПолучитьСсылку(пСсылка, пТип), пСсылка);
	
	мз.Удалить();
	
КонецПроцедуры

//Конвертирует номенклатуру в обе стороны
//Параметры:
// Ссылка - наша номенклатура или guid или name
// Предприятие - Предприятие производителя
Функция Соответствие_ПолучитьProductItem(пСсылка, пПредприятие, ПоУмолчанию = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(пСсылка) Тогда
		Возврат Новый Структура("guid, name");
	КонецЕсли;
	
	Если ТипЗнч(пПредприятие) = Тип("Строка") Тогда
		_Предприятие = ?(Версия_2_0(), ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с).Enterprise(пПредприятие);
	Иначе
		_Предприятие = пПредприятие;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|//1	ВЫБОР КОГДА _Таблица.guid = """" ТОГДА _Таблица.name ИНАЧЕ _Таблица.guid КОНЕЦ КАК Ссылка,
	|//1	_Таблица.guid,
	|//1	_Таблица.name
	|//2	_Таблица.Ссылка
	|//3	_Таблица.Ссылка
	|ИЗ
	|	РегистрСведений.ВетисСоответствие КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|//1	И _Таблица.Ссылка = &Ссылка
	|//2	И _Таблица.guid = &Ссылка
	|//3	И _Таблица.name = &Ссылка
	|	И _Таблица.Предприятие = &Предприятие
	|	И _Таблица.Ссылка ССЫЛКА "+ВетисИмяСправочника.ProductItem("Справочник")+"
	|	И ИСТИНА";
	
	Запрос.УстановитьПараметр("Ссылка", пСсылка);
	Запрос.УстановитьПараметр("Предприятие", _Предприятие);
	
	_ЭтоСсылка = ТипЗнч(пСсылка) = Тип(ВетисИмяСправочника.ProductItem("СправочникСсылка"));
	
	Если _ЭтоСсылка Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//1", "");
	Иначе
		Попытка
			_проверка = Новый УникальныйИдентификатор(пСсылка);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//2", "");
		Исключение
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//3", "");
		КонецПопытки;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если _ЭтоСсылка Тогда
			Возврат Новый Структура("guid, name", ?(Выборка.guid = "", Неопределено, Выборка.guid), Выборка.name);
		Иначе
			Возврат Выборка.Ссылка;
		КонецЕсли;
	Иначе
		Если _ЭтоСсылка Тогда
			Возврат Новый Структура("guid, name");
		Иначе
			Возврат ПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

//Добавление связи
Процедура Соответствие_ДобавитьProductItem(пСсылка, пПредприятие, guid, name = "", пОписание = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(guid) И НЕ ЗначениеЗаполнено(name)Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(пПредприятие) = Тип("Строка") Тогда
		_Предприятие = ?(Версия_2_0(), ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с).Enterprise(пПредприятие);
	Иначе
		_Предприятие = пПредприятие;
	КонецЕсли;
	
	_мз = РегистрыСведений.ВетисСоответствие.СоздатьМенеджерЗаписи();
	
	_мз.Ссылка      = пСсылка;
	_мз.Предприятие = _Предприятие;
	_мз.guid        = guid;
	_мз.name        = name;
	_мз.Описание    = пОписание;
	
	_мз.Записать();
	
КонецПроцедуры

//Удаление связи
//Параметры:
// пСсылка - ссылка на справочник, guid или наименование
Процедура Соответствие_УдалитьProductItem(пСсылка, пПредприятие) Экспорт
	
	Если ТипЗнч(пПредприятие) = Тип("Строка") Тогда
		_Предприятие = ?(Версия_2_0(), ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с).Enterprise(пПредприятие);
	Иначе
		_Предприятие = пПредприятие;
	КонецЕсли;
	
	_мз = РегистрыСведений.ВетисСоответствие.СоздатьМенеджерЗаписи();
	
	_мз.Ссылка = ?(ТипЗнч(пСсылка) = Тип("Строка"), Соответствие_ПолучитьProductItem(пСсылка, _Предприятие), пСсылка);
	_мз.Предприятие = _Предприятие;
	
	_мз.Удалить();
	
КонецПроцедуры

#КонецОбласти

#Область Предопределенные

Функция Предопределенные_Получить(пНазначение, пПоУмолчанию = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	_Таблица.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ВетисПредопределенные КАК _Таблица
	|ГДЕ
	|	_Таблица.Назначение = &Назначение";
	
	Запрос.УстановитьПараметр("Назначение", пНазначение);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат пПоУмолчанию;
	ИначеЕсли Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Значение;
	Иначе
		_список = Новый Массив;
		Пока Выборка.Следующий() Цикл
			_список.Добавить(Выборка.Значение);
		КонецЦикла;
		Возврат _список;
	КонецЕсли;
	
КонецФункции

Процедура Предопределенные_Установить(пНазначение, пЗначение, пКомментарий = "", пЗаменить = Истина) Экспорт
	
	Если пЗаменить = Истина Тогда
		Предопределенные_Удалить(пНазначение);
	КонецЕсли;
	
	_мз = РегистрыСведений.ВетисПредопределенные.СоздатьМенеджерЗаписи();
	_мз.Назначение = пНазначение;
	_мз.Значение = пЗначение;
	_мз.Комментарий = пКомментарий;
	
	Попытка
		_мз.Записать();
	Исключение
		Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

Процедура Предопределенные_Удалить(пНазначение) Экспорт
	
	_нз = РегистрыСведений.ВетисПредопределенные.СоздатьНаборЗаписей();
	
	_нз.Отбор.Назначение.Установить(пНазначение);
	
	_нз.Записать();
	
КонецПроцедуры

Функция Предопределенные_СтрокаВызова(пНазначение) Экспорт
	
	Возврат
	"Предопределенные_Получить("""+пНазначение+""");
	|";
	
КонецФункции

#КонецОбласти

#Область Журнал

Процедура Журнал_Добавить(пТекст, пКонтекст = Неопределено) Экспорт
	
	Период = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	МенеджерЗаписи = РегистрыСведений.ВетисЖурнал.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период        = ТекущаяДата();
	МенеджерЗаписи.Миллисекунды  = Период % 1000;
	МенеджерЗаписи.Расшифровка   = пТекст;
	МенеджерЗаписи.Пользователь  = Пользователи.ТекущийПользователь();
	МенеджерЗаписи.Версия        = Версия();
	
	Если ТипЗнч(пКонтекст) = Тип("Строка") Тогда
		МенеджерЗаписи.Контекст      = пКонтекст;
	Иначе
		МенеджерЗаписи.КлючДанных    = пКонтекст;
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура Журнал_ДобавитьИнформациюОбОшибке(пИнформацияОбОшибке, пКонтекст = "") Экспорт
	
	Журнал_Добавить(ПодробноеПредставлениеОшибки(пИнформацияОбОшибке), пКонтекст);
	
КонецПроцедуры

Процедура Журнал_Очистить() Экспорт
	
	нз = РегистрыСведений.ВетисЖурнал.СоздатьНаборЗаписей();
	нз.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Переменные

Процедура ИнициализироватьПеременные()
	
	ПараметрыСеанса.ВетисПеременные = ПоместитьВоВременноеХранилище(Переменные_Завернуть(Переменные_ПолучитьНовыйКеш()), Новый УникальныйИдентификатор);
	
КонецПроцедуры

Функция Переменные_ПолучитьНовыйКеш()
	
	Возврат Новый Структура;
	
КонецФункции

Функция Переменные_Получить(ИмяПараметра, ПоУмолчанию = Неопределено) Экспорт
	
	Хранилище = ПолучитьИзВременногоХранилища(ПараметрыСеанса.ВетисПеременные);
	
	Если Хранилище = Неопределено Тогда
		Кэш = Переменные_ПолучитьНовыйКеш();
	Иначе
		Кэш = Переменные_Развернуть(Хранилище);
		НайденноеЗначение = Неопределено;
		Если Кэш.Свойство(ИмяПараметра, НайденноеЗначение) Тогда
			Возврат НайденноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Кэш.Вставить(ИмяПараметра, ПоУмолчанию);
	
	ПоместитьВоВременноеХранилище(Переменные_Завернуть(Кэш), ПараметрыСеанса.ВетисПеременные);
	
	Возврат ПоУмолчанию;
	
КонецФункции

Процедура Переменные_Установить(ИмяПараметра, Значение) Экспорт
	
	Хранилище = ПолучитьИзВременногоХранилища(ПараметрыСеанса.ВетисПеременные);
	
	Если Хранилище = Неопределено Тогда
		Кэш = Переменные_ПолучитьНовыйКеш();
	Иначе
		Кэш = Переменные_Развернуть(Хранилище);
		НайденноеЗначение = Неопределено;
		Если Кэш.Свойство(ИмяПараметра, НайденноеЗначение) Тогда
			Если НайденноеЗначение = Значение Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Кэш.Вставить(ИмяПараметра, Значение);
	
	ПоместитьВоВременноеХранилище(Переменные_Завернуть(Кэш), ПараметрыСеанса.ВетисПеременные);
	
КонецПроцедуры

Функция Переменные_Завернуть(Значение)
	//Возврат Новый ХранилищеЗначения(Значение, Новый СжатиеДанных(9));
	Возврат Значение;
КонецФункции

Функция Переменные_Развернуть(Значение)
	//Возврат Значение.Получить();
	Возврат Значение;
КонецФункции

#КонецОбласти

#Область Настройки
//в константе ВетисНастройки хранятся только не ссылочные настройки

Процедура ИнициализироватьНастройки()
	
	_Настройки = Константы.ВетисНастройки.Получить().Получить();
	
	Если _Настройки = Неопределено Тогда
		_Настройки = Новый Структура();
	КонецЕсли;
	
	Переменные_Установить("ВетисТестовый", Настройки_Получить("ВетисТестовый", Ложь));
	Переменные_Установить("ВетисОтладка", Настройки_Получить("ВетисОтладка", Ложь));
	Переменные_Установить("СоздаватьХС", Настройки_Получить("СоздаватьХС", Ложь));
	Переменные_Установить("СоздаватьПредприятия", Настройки_Получить("СоздаватьПредприятия", Ложь));
	
КонецПроцедуры


Функция Настройки_Получить(пИмя, ПоУмолчанию = Неопределено) Экспорт
	
	_Значение = Переменные_Получить(пИмя, Неопределено);
	
	Если _Значение = Неопределено Тогда
		
		_Настройки = Константы.ВетисНастройки.Получить().Получить();
		
		Если _Настройки = Неопределено Тогда
			_Настройки = Новый Структура();
		КонецЕсли;
		
		Если НЕ _Настройки.Свойство(пИмя, _Значение) Тогда
			_Значение = ПоУмолчанию;
		КонецЕсли;
		
		Переменные_Установить(пИмя, _Значение);
		
	КонецЕсли;
	
	Возврат _Значение;
	
КонецФункции

Процедура Настройки_Установить(пИмя, пЗначение) Экспорт
	
	_Настройки = Константы.ВетисНастройки.Получить().Получить();
	
	Если _Настройки = Неопределено Тогда
		_Настройки = Новый Структура();
	КонецЕсли;
	
	Если пИмя = "Корень" Тогда
		Для каждого _Значение Из пЗначение Цикл
			_Настройки.Вставить(_Значение.Ключ, _Значение.Значение);
		КонецЦикла;
	Иначе
		_Настройки.Вставить(пИмя, пЗначение);
	КонецЕсли;
	
	Константы.ВетисНастройки.Установить(Новый ХранилищеЗначения(_Настройки, Новый СжатиеДанных(9)));
	
	Переменные_Установить(пИмя, пЗначение);
	
КонецПроцедуры


Функция Настройки_Интеграция(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("Интеграция", Ложь);
	Иначе
		Настройки_Установить("Интеграция", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_Префикс(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("Префикс", "");
	Иначе
		Настройки_Установить("Префикс", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ОберткаHttp(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ОберткаHttp", Ложь);
	Иначе
		Настройки_Установить("ОберткаHttp", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ОсновнойХС(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		_Значение = Переменные_Получить("ВетисОсновнойХС", Неопределено);
		Если _Значение = Неопределено Тогда
			_Значение = Константы.ВетисОсновнойХС.Получить();
			Переменные_Установить("ВетисОсновнойХС", _Значение);
		КонецЕсли;
		Возврат _Значение;
	Иначе
		Константы.ВетисОсновнойХС.Установить(пЗначение);
		Переменные_Установить("ВетисХС", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_Тестовый(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ВетисТестовый", Ложь);
	Иначе
		Настройки_Установить("ВетисТестовый", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_Сервис(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		_Значение = Переменные_Получить("ВетисСервис", Неопределено);
		Если _Значение = Неопределено Тогда
			_Значение = Константы.ВетисСервис.Получить();
			Переменные_Установить("ВетисСервис", ?(ЗначениеЗаполнено(_Значение), _Значение, Перечисления.ВетисСервис.mercury_g2b_service));
		КонецЕсли;
		Возврат _Значение;
	Иначе
		Константы.ВетисСервис.Установить(пЗначение);
		Переменные_Установить("ВетисСервис", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ВремяОжиданияОтвета(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ВремяОжиданияОтвета", 60);
	Иначе
		Настройки_Установить("ВремяОжиданияОтвета", ?(пЗначение < 0, 0, пЗначение));
	КонецЕсли;
	
КонецФункции

Функция РазрешенаОтладка(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ВетисОтладка", Ложь) = Истина;
	Иначе
		Настройки_Установить("ВетисОтладка", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_КоличествоОбъектовВСписке(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("КоличествоОбъектовВСписке", 1000);
	Иначе
		Настройки_Установить("КоличествоОбъектовВСписке", ?(пЗначение < 0, 0, ?(пЗначение > 1000, 1000, пЗначение)));
	КонецЕсли;
	
КонецФункции

Функция Настройки_СоздаватьХС(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("СоздаватьХС", Ложь) = Истина;
	Иначе
		Настройки_Установить("СоздаватьХС", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_СоздаватьПредприятия(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("СоздаватьПредприятия", Ложь) = Истина;
	Иначе
		Настройки_Установить("СоздаватьПредприятия", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ПоказыватьGuid(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ПоказыватьGuid", Ложь) = Истина;
	Иначе
		Настройки_Установить("ПоказыватьGuid", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_СправочникПродукцииЛокально(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("СправочникПродукцииЛокально", Ложь) = Истина;
	Иначе
		Настройки_Установить("СправочникПродукцииЛокально", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_УровеньУпаковки(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("УровеньУпаковки", Перечисления.ВетисPackageLevelType.Транспортный);
	Иначе
		Настройки_Установить("УровеньУпаковки", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_МногоуровневаяУпаковка(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("МногоуровневаяУпаковка", Ложь) = Истина И Версия_2_0();
	Иначе
		Настройки_Установить("МногоуровневаяУпаковка", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_КлассМаркировки(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("КлассМаркировки", Перечисления.ВетисProductMarkingClass.UNDEFINED);
	Иначе
		Настройки_Установить("КлассМаркировки", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_Мероприятия(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("Мероприятия", Ложь) = Истина;
	Иначе
		Настройки_Установить("Мероприятия", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ЛабораторныеИсследования(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ЛабораторныеИсследования", Ложь) = Истина;
	Иначе
		Настройки_Установить("ЛабораторныеИсследования", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_МультимодальныеПеревозки(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("МультимодальныеПеревозки", Ложь) = Истина;
	Иначе
		Настройки_Установить("МультимодальныеПеревозки", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_УсловияПеремещения(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("УсловияПеремещения", Ложь) = Истина;
	Иначе
		Настройки_Установить("УсловияПеремещения", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ВСД_БлагополучиеМестности(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("БлагополучиеМестности", "Местность благополучна по заразным болезням животных");
	Иначе
		Настройки_Установить("БлагополучиеМестности", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ВСД_НазначениеГруза(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Предопределенные_Получить("Purpose.Гашение");
	Иначе
		Предопределенные_Установить("Purpose.Гашение", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ВСД_ВСЭ(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ВСД_ВСЭ", ПредопределенноеЗначение("Перечисление.ВетисResearchResult.UNKNOWN"));
	Иначе
		Настройки_Установить("ВСД_ВСЭ", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ВСД_ОсобыеОтметки(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ВСД_ОсобыеОтметки", "");
	Иначе
		Настройки_Установить("ВСД_ОсобыеОтметки", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ВСД_КонтрольГосВетврачем(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ВСД_КонтрольГосВетврачем", Ложь) = Истина;
	Иначе
		Настройки_Установить("ВСД_КонтрольГосВетврачем", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ТТН_Тип(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ТТН_Тип", ПредопределенноеЗначение("Перечисление.ВетисDocumentType.ТовароТранспортнаяНакладная"));
	Иначе
		Настройки_Установить("ТТН_Тип", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ТТН_СпособХранения(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ТТН_СпособХранения", ПредопределенноеЗначение("Перечисление.ВетисTransportStorageType.Замороженные"));
	Иначе
		Настройки_Установить("ТТН_СпособХранения", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ТТН_Посредник(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Предопределенные_Получить("ТТН_Посредник");
	Иначе
		Предопределенные_Установить("ТТН_Посредник", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ТТН_Транспорт(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Предопределенные_Получить("ТТН_Транспорт");
	Иначе
		Предопределенные_Установить("ТТН_Транспорт", пЗначение);
	КонецЕсли;
	
КонецФункции



Функция Версия() Экспорт
	
	_Версия = Переменные_Получить("ВетисВерсия", Неопределено);
	
	Если _Версия = Неопределено Тогда
		
		_Версия = Константы.ВетисВерсия.Получить();
		
		Если Не ЗначениеЗаполнено(_Версия) Тогда
			_Версия = Перечисления.ВетисВерсияAPI.v1_4;
		КонецЕсли;
		
		Переменные_Установить("ВетисВерсия", _Версия);
		
	КонецЕсли;
	
	Возврат _Версия;
	
КонецФункции

Функция ВерсияПредставление(пПрефикс = Неопределено, пСуффикс = Неопределено) Экспорт
	
	_версия = Версия();
	
	_версия = ?(_версия = Перечисления.ВетисВерсияAPI.v1_4, "", ?(пПрефикс = Неопределено, "", пПрефикс) + _версия + ?(пСуффикс = Неопределено, "", пСуффикс));
	
	Возврат _версия;
	
КонецФункции

Функция ВерсияРавно(пЗначение) Экспорт
	
	_версия = Версия();
	
	Если ТипЗнч(пЗначение) = Тип("Строка") Тогда
		Возврат Строка(_версия) = пЗначение;
	Иначе
		Возврат _версия = пЗначение;
	КонецЕсли;
	
КонецФункции

Функция Версия_2_0() Экспорт
	
	Возврат Версия() = ПредопределенноеЗначение("Перечисление.ВетисВерсияAPI.v2_0");
	
КонецФункции

Процедура ВерсияУстановить(пВерсия) Экспорт
	
	Если ЗначениеЗаполнено(пВерсия) Тогда
		_Версия = пВерсия;
	Иначе
		_Версия = Перечисления.ВетисВерсияAPI.v1_4;
	КонецЕсли;
	
	Константы.ВетисВерсия.Установить(_Версия);
	
	Переменные_Установить("ВетисВерсия", _Версия);
	
КонецПроцедуры

#КонецОбласти

#Область XSD

Процедура ИнициализироватьXSD() Экспорт
	
	//вызывать:
	// после изменения тестовый - рабочий
	// после изменения версии
	// после изменения сервиса
	
	_версия = Версия();
	
	_тестовый = Настройки_Тестовый();
	
	_сервис = Настройки_Сервис();
	
	Если _версия = Перечисления.ВетисВерсияAPI.v2_0 Тогда
		Если _тестовый Тогда
			_имя = "http://api.vetrf.ru/schema/platform/services/2.0-RC-last/";
			_суф = "_v2.0_pilot.wsdl";
		Иначе
			_имя = "http://api.vetrf.ru/schema/platform/services/2.0-last/";
			_суф = "_v2.0_production.wsdl";
		КонецЕсли;
		
		_таблица = Неопределено;
		
		Если _сервис = Перечисления.ВетисСервис.mercury_g2b_service Тогда
			WSDLДобавить(_таблица, "ams-mercury.service", "http://api.vetrf.ru/schema/cdm/application/service", "ApplicationManagementServiceBindingQSService", "ApplicationManagementServiceBindingQSPort", _Имя+"ams-mercury-g2b.service"+_суф, Истина);
		ИначеЕсли _сервис = Перечисления.ВетисСервис.mercury_vu_service Тогда
			WSDLДобавить(_таблица, "ams-mercury.service", "http://api.vetrf.ru/schema/cdm/application/service", "ApplicationManagementServiceBindingQSService", "ApplicationManagementServiceBindingQSPort", _Имя+"ams-mercury-vu.service"+_суф, Истина);
		КонецЕсли;
		
		WSDLДобавить(_таблица, ВетисMercuryApplications_2_0.ИмяСервиса(), "http://api.vetrf.ru/schema/cdm/application/service", "ApplicationManagementServiceBindingQSService", "ApplicationManagementServiceBindingQSPort", _Имя+"ApplicationManagementService_v1.1.wsdl");
		
		WSDLДобавить(_таблица, ВетисDictionaryService_2_0.ИмяСервиса(), "http://api.vetrf.ru/schema/cdm/registry/dictionary/service/v2", "DictionaryServiceBindingQSService", "DictionaryServiceBindingQSPort", _Имя+"DictionaryService"+_суф);
		WSDLДобавить(_таблица, ВетисEnterpriseService_2_0.ИмяСервиса(), "http://api.vetrf.ru/schema/cdm/registry/enterprise/service/v2", "EnterpriseServiceBindingQSService", "EnterpriseServiceBindingQSPort", _Имя+"EnterpriseService"+_суф);
		WSDLДобавить(_таблица, ВетисIkarService_2_0.ИмяСервиса(),       "http://api.vetrf.ru/schema/cdm/registry/ikar/service/v2",       "IkarServiceBindingQSService",       "IkarServiceBindingQSPort",       _Имя+"IkarService"+_суф);
		WSDLДобавить(_таблица, ВетисProductService_2_0.ИмяСервиса(),    "http://api.vetrf.ru/schema/cdm/registry/product/service/v2",    "ProductServiceBindingQSService",    "ProductServiceBindingQSPort",    _Имя+"ProductService"+_суф);
		WSDLДобавить(_таблица, ВетисRegionalizationService_2_0.ИмяСервиса(), "http://api.vetrf.ru/schema/cdm/registry/r13n/service/v2",  "RegionalizationServiceBindingQSService", "RegionalizationServiceBindingQSPort", _Имя+"RegionalizationService"+_суф);
		
		Переменные_Установить("wsdl", _таблица);
		
		Если _тестовый Тогда
			_имя = "http://api.vetrf.ru/schema/platform/services/2.0-RC-last/";
			_суф = "_v2.0.xsd";
		Иначе
			_имя = "http://api.vetrf.ru/schema/platform/services/2.0-last/";
			_суф = "_v2.0.xsd";
		КонецЕсли;
		
		_таблица = Неопределено;
		
		XSDДобавить(_таблица, _Имя+"application_v1.1.xsd",          ВетисApplication_2_0.URI());
		XSDДобавить(_таблица, _Имя+"base_v1.1.xsd",                 ВетисBase_2_0.URI());
		XSDДобавить(_таблица, _Имя+"dictionary"+_суф,               ВетисDictionary_2_0.URI());
		XSDДобавить(_таблица, _Имя+"document"+_суф,                 ВетисMercuryVetdocument_2_0.URI());
		//XSDДобавить(_таблица, _Имя+"registry_ws_definitions"+_суф,  ВетисRegistry_2_0.ServiceURI());
		
		Если _сервис = Перечисления.ВетисСервис.mercury_g2b_service Тогда
			XSDДобавить(_таблица, _Имя+"mercury_g2b_applications"+_суф, ВетисMercuryApplications_2_0.URI());
		ИначеЕсли _сервис = Перечисления.ВетисСервис.mercury_vu_service Тогда
			XSDДобавить(_таблица, _Имя+"mercury_vu_applications"+_суф, ВетисMercuryApplications_2_0.URI());
		КонецЕсли;
		
		Переменные_Установить("xsd", _таблица);
		
	Иначе
		_имя = "http://api.vetrf.ru/schema/platform/";
		
		Если _тестовый Тогда
			_суф = "_v1.4_pilot.wsdl";
		Иначе
			_суф = "_v1.3_production.wsdl";
		КонецЕсли;
		
		_таблица = Неопределено;
		
		//для совместиовсти с 2.0
		WSDLДобавить(_таблица, "ams-mercury.service", "http://api.vetrf.ru/schema/cdm/application/service", "ApplicationManagementServiceBindingQSService", "ApplicationManagementServiceBindingQSPort", _Имя+"services/ApplicationManagementService"+_суф, Истина);
		
		WSDLДобавить(_таблица, "ApplicationManagementService", "http://api.vetrf.ru/schema/cdm/application/service", "ApplicationManagementServiceBindingQSService", "ApplicationManagementServiceBindingQSPort", _Имя+"services/ApplicationManagementService"+_суф);
		
		WSDLДобавить(_таблица, "DictionaryService", "http://api.vetrf.ru/schema/cdm/registry/service", "DictionaryServiceBindingQSService", "DictionaryServiceBindingQSPort", _Имя+"services/DictionaryService"+_суф);
		WSDLДобавить(_таблица, "EnterpriseService", "http://api.vetrf.ru/schema/cdm/registry/service", "EnterpriseServiceBindingQSService", "EnterpriseServiceBindingQSPort", _Имя+"cerberus/services/EnterpriseService"+_суф);
		WSDLДобавить(_таблица, "IkarService",       "http://api.vetrf.ru/schema/cdm/registry/service", "IkarServiceBindingQSService",       "IkarServiceBindingQSPort",       _Имя+"ikar/services/IkarService"+_суф);
		WSDLДобавить(_таблица, "ProductService",    "http://api.vetrf.ru/schema/cdm/registry/service", "ProductServiceBindingQSService",    "ProductServiceBindingQSPort",    _Имя+"services/ProductService"+_суф);
		
		Переменные_Установить("wsdl", _таблица);
		
		_имя = "http://api.vetrf.ru/schema/platform/mercury/g2b/";
		_суф = "_v1.4.xsd";
		
		_таблица = Неопределено;
		
		XSDДобавить(_таблица, _Имя+"application"+_суф,         ВетисApplication.URI());
		XSDДобавить(_таблица, _Имя+"argus_common"+_суф,        ВетисArgusCommon.URI());
		XSDДобавить(_таблица, _Имя+"production"+_суф,          ВетисArgusProduction.URI());
		XSDДобавить(_таблица, _Имя+"argus_shipment"+_суф,      ВетисArgusShipment.URI());
		XSDДобавить(_таблица, _Имя+"base"+_суф,                ВетисBase.URI());
		XSDДобавить(_таблица, _Имя+"enterprise"+_суф,          ВетисCerberusEnterprise.URI());
		XSDДобавить(_таблица, _Имя+"ikar"+_суф,                ВетисIkar.URI());
		XSDДобавить(_таблица, _Имя+"applications"+_суф,        ВетисMercuryApplications.URI());
		XSDДобавить(_таблица, _Имя+"veterinary_document"+_суф, ВетисMercuryVetdocument.URI());
		
		Переменные_Установить("xsd", _таблица);
		
	КонецЕсли;
	
	СброситьКеш();
	
	ФабрикаОбщая();
	
КонецПроцедуры

Процедура СброситьКеш()
	
	Переменные_Установить("КешФабрики", Новый Соответствие);
	Переменные_Установить("КешОпределения", Новый Соответствие);
	
КонецПроцедуры


Функция ФабрикаОбщая() Экспорт
	
	_Кеш = Переменные_Получить("КешФабрики", Новый Соответствие);
	
	_фабрика = _Кеш.Получить("Общая");
	
	Если НЕ _фабрика = Неопределено Тогда
		Возврат _фабрика;
	КонецЕсли;
	
	_url = XSDПолучитьURL();
	
	Если _url.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	_фабрика = СоздатьФабрикуXDTO(_url);
	
	_Пакеты = Новый Массив;
	
	Для Каждого _Пакет Из _фабрика.Пакеты Цикл
		_Пакеты.Добавить(_Пакет);
	КонецЦикла;
	
	Для Каждого _Пакет Из ВетисSoapEnvelope.Фабрика().Пакеты Цикл
		_Пакеты.Добавить(_Пакет);
	КонецЦикла;
	
	_фабрика = Новый ФабрикаXDTO(, _Пакеты);
	
	_Кеш.Вставить("Общая", _фабрика);
	
	Переменные_Установить("КешФабрики", _Кеш);
	
	Возврат _фабрика;
	
КонецФункции

Функция ФабрикаWS(пИмяСервиса) Экспорт
	
	_Кеш = Переменные_Получить("КешФабрики", Новый Соответствие);
	
	_фабрика = _Кеш.Получить(пИмяСервиса);
	
	Если НЕ _фабрика = Неопределено Тогда
		Возврат _фабрика;
	КонецЕсли;
	
	_ФабрикаXDTO = ФабрикаОбщая();
	
	_Определения = Определения(пИмяСервиса);
	
	_URI = Новый Массив;  
	_URI.Добавить(ВетисRegistry_2_0.ServiceURI());
	_URI.Добавить(ВетисBase_2_0.ServiceURI());
	
	_ФабрикаWS = Новый ФабрикаXDTO(_Определения.ФабрикаXDTO.ЭкспортМоделиXDTO(_URI), _ФабрикаXDTO.Пакеты);  
	
	_Пакеты = Новый Массив;  
	_Пакеты.Добавить(_ФабрикаXDTO.Пакеты.Получить(ВетисSoapEnvelope.URI()));
	
	Для Каждого _Пакет Из _ФабрикаWS.Пакеты Цикл  
		_Пакеты.Добавить(_Пакет);
	КонецЦикла;  
	
	_фабрика = Новый ФабрикаXDTO(, _Пакеты);
	
	_Кеш = Переменные_Получить("КешФабрики", Новый Соответствие);
	
	_Кеш.Вставить(пИмяСервиса, _фабрика);
	
	Переменные_Установить("КешФабрики", _Кеш);
	
	Возврат _фабрика;
	
КонецФункции

Функция Прокси(пИмяСервиса) Экспорт
	
	_ТаймАутПрокси = 600;
	_ЗащищенноеСоедиенение = Новый ЗащищенноеСоединениеOpenSSL;
	
	Попытка
		
		_wsdl = WSDLПолучить(пИмяСервиса);
		
		_Определения = ОпределенияПоURL(_wsdl.URL);
		
		Если _ЗащищенноеСоедиенение = Неопределено Тогда
			_Прокси = Новый WSПрокси(_Определения, _wsdl.URI, _wsdl.Сервис, _wsdl.Порт,, _ТаймАутПрокси);
		Иначе
			_Прокси = Новый WSПрокси(_Определения, _wsdl.URI, _wsdl.Сервис, _wsdl.Порт,, _ТаймАутПрокси, _ЗащищенноеСоедиенение);
		КонецЕсли;
		
		_Прокси.Пользователь = Логин();
		_Прокси.Пароль = Пароль();
		
		Возврат _Прокси;
		
	Исключение
		Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция ПроксиHttp(пИмяСервиса, пФабрика, пRequest, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Отладка = РазрешенаОтладка();
	
	_ИмяОперации = пRequest.Тип().Имя;//должно совпадать с именем объекта
	
	_настройки = ПолучитьНастройкиХС();
	
	_составные = WSDLПолучить(пИмяСервиса, Истина).Составные;
	
	_Соединение = ПолучитьСоединение(_составные.Сервер, _составные.Порт, _настройки.Логин, _настройки.Пароль, _составные.ЗащищенноеСоединение);
	
	_Фабрика = пФабрика;
	
	_Envelope = ВетисSoapEnvelope.Envelope(пRequest, _Фабрика);
	
	_ТекстЗапроса = ВетисОбщегоНазначения.Сериализовать(_Фабрика, _Envelope);
	
	Если _Отладка Тогда
		Журнал_Добавить(_ТекстЗапроса, _ИмяОперации);
	КонецЕсли;
	
	_Запрос = ПолучитьЗапрос(_составные.Ресурс, _ТекстЗапроса);
	
	_Ответ = _Соединение.ОтправитьДляОбработки(_Запрос);
	
	Если НЕ _Ответ.КодСостояния = 200 Тогда
		пОтказ = Истина;
		пОшибка = _Ответ.ПолучитьТелоКакСтроку("UTF-8");
		Если НЕ _Отладка Тогда
			Журнал_Добавить(_ТекстЗапроса, _ИмяОперации);
		КонецЕсли;
		Журнал_Добавить("Ошибка при отправке запроса", _ИмяОперации);
		Журнал_Добавить(пОшибка, _ИмяОперации);
		Возврат Неопределено;
	КонецЕсли;
	
	Если _Отладка Тогда
		Журнал_Добавить(_Ответ.ПолучитьТелоКакСтроку("UTF-8"), _ИмяОперации);
	КонецЕсли;
	
	_Envelope = ВетисОбщегоНазначения.Десериализовать(_Фабрика, _Ответ.ПолучитьТелоКакСтроку("UTF-8"), _Envelope.Тип());
	
	_Response = ВетисSoapEnvelope.Извлечь(_Envelope);
	
	Возврат _Response;
	
КонецФункции

Функция Определения(пИмяСервиса, пЗащищенноеСоедиенение = Неопределено) Экспорт
	
	Возврат ОпределенияПоURL(WSDLПолучить(пИмяСервиса).URL, пЗащищенноеСоедиенение);
	
КонецФункции

Функция ОпределенияПоURL(пURL, пЗащищенноеСоедиенение = Неопределено)
	
	_Кеш = Переменные_Получить("КешОпределения", Новый Соответствие);
	
	_Определения = _Кеш.Получить(пURL);
	
	Если НЕ _Определения = Неопределено Тогда
		Возврат _Определения;
	КонецЕсли;
	
	_ЗащищенноеСоедиенение = Новый ЗащищенноеСоединениеOpenSSL;
	
	_ТаймАутПрокси = 60;
	
	Попытка
		Если _ЗащищенноеСоедиенение = Неопределено Тогда
			_Определения = Новый WSОпределения(пURL,,,, _ТаймАутПрокси);
		Иначе
			_Определения = Новый WSОпределения(пURL,,,, _ТаймАутПрокси, _ЗащищенноеСоедиенение);
		КонецЕсли;
	Исключение
		Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
	_Кеш.Вставить(пURL, _Определения);
	
	Переменные_Установить("КешОпределения", _Кеш);
	
	Возврат _Определения;
	
КонецФункции


Процедура WSDLДобавить(пТаблица, пИмя, пURI, пСервис, пПорт, пURL, пОпределятьАдрес = Ложь)
	
	Если пТаблица = Неопределено Тогда
		пТаблица = Новый ТаблицаЗначений;
		пТаблица.Колонки.Добавить("Имя");
		пТаблица.Колонки.Добавить("URI");
		пТаблица.Колонки.Добавить("Сервис");
		пТаблица.Колонки.Добавить("Порт");
		пТаблица.Колонки.Добавить("URL");
		пТаблица.Колонки.Добавить("Адрес");
		пТаблица.Колонки.Добавить("Составные");
	КонецЕсли;
	
	_строка = пТаблица.Добавить();
	_строка.Имя    = пИмя;
	_строка.URI    = пURI;
	_строка.Сервис = пСервис;
	_строка.Порт   = пПорт;
	_строка.URL    = пURL;
	
	Если пОпределятьАдрес = Истина Тогда
		_определения = ОпределенияПоURL(пURL);
		
		_сервис = ПолучитьЭлементКоллекции(_Определения.Сервисы, пСервис);
		
		Если _сервис = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		_точка = ПолучитьЭлементКоллекции(_сервис.ТочкиПодключения, пПорт);
		
		Если _точка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		_строка.Адрес     = _точка.Местоположение;
		_строка.Составные = РазложитьАдрес(_точка.Местоположение);
	КонецЕсли;
	
КонецПроцедуры

Функция WSDLПолучить(пИмяСервиса, пОпределятьАдрес = Ложь)
	
	_таблица = Переменные_Получить("wsdl");
	
	_строка = _таблица.Найти(пИмяСервиса, "Имя");
	
	Если пОпределятьАдрес = Истина И ПустаяСтрока(_строка.Адрес) Тогда
		_определения = ОпределенияПоURL(_строка.URL);
		_сервис = ПолучитьЭлементКоллекции(_Определения.Сервисы, _строка.Сервис);
		Если НЕ _сервис = Неопределено Тогда
			_точка = ПолучитьЭлементКоллекции(_сервис.ТочкиПодключения, _строка.Порт);
			Если НЕ _точка = Неопределено Тогда
				_строка.Адрес     = _точка.Местоположение;
				_строка.Составные = РазложитьАдрес(_точка.Местоположение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат _строка;
	
КонецФункции

Функция WSDLПолучитьURL() Экспорт
	
	_таблица = Переменные_Получить("wsdl");
	
	_список = Новый Массив;
	
	Для каждого _строка Из _таблица Цикл
		_список.Добавить(_строка.url);
	КонецЦикла;
	
	Возврат _список;
	
КонецФункции


Процедура XSDДобавить(пТаблица, пURL, пURI)
	
	Если пТаблица = Неопределено Тогда
		пТаблица = Новый ТаблицаЗначений;
		пТаблица.Колонки.Добавить("URI");
		пТаблица.Колонки.Добавить("URL");
	КонецЕсли;
	
	_строка = пТаблица.Добавить();
	_строка.URI    = пURI;
	_строка.URL    = пURL;
	
КонецПроцедуры

Функция XSDПолучить()
	
	_таблица = Переменные_Получить("xsd");
	
	Возврат _таблица;
	
КонецФункции

Функция XSDПолучитьURL() Экспорт
	
	_таблица = Переменные_Получить("xsd");
	
	_список = Новый Массив;
	
	Для каждого _строка Из _таблица Цикл
		_список.Добавить(_строка.url);
	КонецЦикла;
	
	Возврат _список;
	
КонецФункции


Функция ВыполнитьЗапрос(пИмяСервиса, пИмяОперации, пФабрика, пRequest, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "", пОжидание = 5) Экспорт
	
	_Отладка = РазрешенаОтладка();
	
	_настройки = ПолучитьНастройкиХС(issuerId);
	
	_составные = WSDLПолучить(пИмяСервиса).Составные;
	
	_Соединение = ПолучитьСоединение(_составные.Сервер, _составные.Порт, _настройки.Логин, _настройки.Пароль, _составные.ЗащищенноеСоединение);
	
	_Фабрика = пФабрика;
	
	_ИмяОперации = пИмяОперации;
	
	//запрос на создание заявки
	
	_Application = ВетисApplication.Application(пRequest, _ИмяОперации, _настройки.issuerId);
	
		_SubmitRequest = ВетисApplication.submitApplicationRequest(_Application, _настройки.КлючАПИ);
		
			_Envelope = ВетисSoapEnvelope.Envelope(_SubmitRequest, _Фабрика);
			
				_ТекстЗапроса = ВетисОбщегоНазначения.Сериализовать(_Фабрика, _Envelope);
				
				Если _Отладка Тогда
					Журнал_Добавить(_ТекстЗапроса, _ИмяОперации);
				КонецЕсли;
				
				_Запрос = ПолучитьЗапрос(_составные.Ресурс, _ТекстЗапроса);
				
				_Ответ = _Соединение.ОтправитьДляОбработки(_Запрос);
				
				Если НЕ _Ответ.КодСостояния = 200 Тогда
					пОтказ = Истина;
					пОшибка = _Ответ.ПолучитьТелоКакСтроку("UTF-8");
					Если НЕ _Отладка Тогда
						Журнал_Добавить(_ТекстЗапроса, _ИмяОперации);
					КонецЕсли;
					Журнал_Добавить("Ошибка при отправке запроса", _ИмяОперации);
					Журнал_Добавить(пОшибка, _ИмяОперации);
					Возврат Неопределено;
				КонецЕсли;
				
			_Envelope = ВетисОбщегоНазначения.Десериализовать(_Фабрика, _Ответ.ПолучитьТелоКакСтроку("UTF-8"), _Envelope.Тип());
		
		_SubmitResponse = ВетисSoapEnvelope.Извлечь(_Envelope).submitApplicationResponse;
	
	Если НЕ (_SubmitResponse.Application.status = ВетисКонстанты.Status_ACCEPTED()) Тогда
		пОтказ = Истина;
		пОшибка = "Запрос вернулся со статусом " + _SubmitResponse.Application.status;
		Журнал_Добавить(пОшибка, _ИмяОперации);
		Возврат Неопределено;
	КонецЕсли;
	
	//запрос на получение результатов обработки заявки
	
	_receiveRequest = ВетисApplication.receiveApplicationResultRequest(_SubmitResponse.Application.applicationId, _настройки.issuerId, _настройки.КлючАПИ);
	
	_Envelope = ВетисSoapEnvelope.Envelope(_receiveRequest, _Фабрика, "receiveApplicationResultRequest");
	
	_ТекстЗапроса = ВетисОбщегоНазначения.Сериализовать(_Фабрика, _Envelope);
	
	Если _Отладка Тогда
		Журнал_Добавить(_ТекстЗапроса, _ИмяОперации);
	КонецЕсли;
	
	_Запрос = ПолучитьЗапрос(_составные.Ресурс, _ТекстЗапроса);
	
	_Ожидание = Настройки_ВремяОжиданияОтвета();
	_ВремяНачала = ТекущаяДата();
	_Время = _ВремяНачала;
	_Пауза = 5;
	
	Пока Истина Цикл
		
		_Ответ = _Соединение.ОтправитьДляОбработки(_Запрос);
		
		Если НЕ _Ответ.КодСостояния = 200 Тогда
			пОтказ = Истина;
			пОшибка = _Ответ.ПолучитьТелоКакСтроку("UTF-8");
			Если НЕ _Отладка Тогда
				Журнал_Добавить(_ТекстЗапроса, _ИмяОперации);
			КонецЕсли;
			Журнал_Добавить("Ошибка при отправке запроса", _ИмяОперации);
			Журнал_Добавить(пОшибка, _ИмяОперации);
			Возврат Неопределено;
		КонецЕсли;
		
		_Envelope = ВетисОбщегоНазначения.Десериализовать(_Фабрика, _Ответ.ПолучитьТелоКакСтроку("UTF-8"), _Envelope.Тип());
		
		_receiveResponse = ВетисSoapEnvelope.Извлечь(_Envelope).receiveApplicationResultResponse;
		
		Если _receiveResponse.Application.Status = ВетисКонстанты.Status_IN_PROCESS() Тогда
			Если ТекущаяДата() > _ВремяНачала + _Ожидание Тогда
				пОтказ = Истина;
				пОшибка = "Превышено время ожидания";
				Журнал_Добавить(пОшибка, _ИмяОперации);
				Возврат Неопределено;
			Иначе
				Журнал_Добавить("Ждем ответа", _ИмяОперации);
				Пока ТекущаяДата() < _Время + _Пауза Цикл
					//пауза синхронно
				КонецЦикла;
				_Время = ТекущаяДата();
			КонецЕсли;
		Иначе
			Если НЕ _receiveResponse.Application.status = ВетисКонстанты.Status_COMPLETED() Тогда
				пОтказ = Истина;
				пОшибка = ПолучитьТекстОшибки(_receiveResponse.Application.errors);
				Журнал_Добавить(пОшибка, _ИмяОперации);
				Возврат Неопределено;
			Иначе
				Если _Отладка Тогда
					Журнал_Добавить(ВетисОбщегоНазначения.Сериализовать(_Фабрика, _receiveResponse.Application), _ИмяОперации);
				КонецЕсли;
				
				Возврат ВетисApplication.ApplicationResult(_receiveResponse.Application);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции


Функция ПолучитьСоединение(пСервер, пПорт = Неопределено, пЛогин = Неопределено, пПароль = Неопределено, пЗащищенноеСоединение = Неопределено, пПрокси = Неопределено)
	
	Если пЛогин = Неопределено Тогда
		_Логин = Логин();
	Иначе
		_Логин = пЛогин;
	КонецЕсли;
	
	Если пПароль = Неопределено Тогда
		_Пароль = Пароль();
	Иначе
		_Пароль = пПароль;
	КонецЕсли;
	
	_ВремяОжидания = Настройки_ВремяОжиданияОтвета();
	
	Если пЗащищенноеСоединение = Неопределено Тогда
		Возврат Новый HTTPСоединение(пСервер, пПорт, _Логин, _Пароль, , Истина);
	Иначе
		Возврат Новый HTTPСоединение(пСервер, пПорт, _Логин, _Пароль, , _ВремяОжидания, пЗащищенноеСоединение);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗапрос(пАдресРесурса, пТекстЗапроса)
	
	_Запрос = Новый HTTPЗапрос(пАдресРесурса);
	
	_Запрос.Заголовки.Вставить("Content-Type", "text/xml;charset=utf-8");
	
	_Запрос.УстановитьТелоИзСтроки(пТекстЗапроса);
	
	Возврат _Запрос;
	
КонецФункции

//http://vetrf.ru/vetrf-forum/posts/list/870/6633.page#43821
//С одной стороны, есть ограничение сверху: 5 запросов в секунду от одного клиента (логина).
//Причем, это ограничение общее для всех запросов к шлюзу, не только receiveApplicationResultRequest.
//С другой стороны, нет смысла 5 раз в секунду опрашивать сервер в надежде получить результат операции,
//которая выполняется 2 минуты, к примеру. 
//Поэтому рекомендации здесь такие:
// для каждого типа заявки (операции) определить время ожидания перед первым receiveApplicationResultRequest
// равное минимальному времени обработки заявки. И далее повторять опрос с интервалом 2 секунды.

//сделать: фиксировать время выполнения заявок

Функция ПолучитьТекстОшибки(errors)
	
	Если ТипЗнч(errors.error) = Тип("ОбъектXDTO") Тогда
		Возврат errors.error.code + " - " + errors.error.Последовательность().ПолучитьТекст(0);
	Иначе
		_Ошибка = "";
		Для каждого _error Из errors.error Цикл
			_Ошибка = _Ошибка + Символы.ПС + _error.code + " - " + _error.Последовательность().ПолучитьТекст(0);
		КонецЦикла;
		Возврат Сред(_Ошибка, 2);;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЭлементКоллекции(пКоллекция, пИмя)
	
	Для каждого _Элемент Из пКоллекция Цикл
		Если _Элемент.Имя = пИмя Тогда
			Возврат _Элемент;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция РазложитьАдрес(пСтрока)
	
	_результат = Новый Структура;
	
	_строка = пСтрока;
	
	_позиция = Найти(_строка, "://");
	
	_результат.Вставить("ЗащищенноеСоединение", ?(ВРег(Лев(_строка, _позиция - 1)) = "HTTPS", Новый ЗащищенноеСоединениеOpenSSL, Неопределено));
	
	_строка = Сред(_строка, _позиция + 3);
	
	_позиция = Найти(_строка, "/");
	
	_результат.Вставить("Ресурс", Сред(_строка, _позиция + 1));
	
	_строка = Лев(_строка, _позиция - 1);
	
	_позиция = Найти(_строка, ":");
	
	Если _позиция = 0 Тогда
		_результат.Вставить("Сервер", _строка);
		_результат.Вставить("Порт", Неопределено);
	Иначе
		_результат.Вставить("Сервер", Лев(_строка, _позиция - 1));
		_результат.Вставить("Порт", Число(Сред(_строка, _позиция + 1)));
	КонецЕсли;
	
	Возврат _результат;
	
КонецФункции

Функция Онлайн() Экспорт
	Попытка 
		_Соединение = Новый HTTPСоединение("http://api.vetrf.ru/");
		Возврат Истина;
	Исключение 
		Возврат Ложь;
	КонецПопытки;
КонецФункции

#КонецОбласти

#Область ДлительныеОперации

Функция ОтправитьЗапрос(пИмяФункции, пRequest, issuerId = Неопределено) Экспорт
	//запрос на создание заявки
	
	_составные = WSDLПолучить("ams-mercury.service").Составные;
	
	_Соединение = ПолучитьСоединение(_составные.Сервер, _составные.Порт, , , _составные.ЗащищенноеСоединение);
	
	_Фабрика = ФабрикаОбщая();
	
	_Application = ВетисApplication.Application(пRequest, issuerId);
	
	_SubmitRequest = ВетисApplication.submitApplicationRequest(_Application);
	
	_Envelope = ВетисSoapEnvelope.Envelope(_SubmitRequest, _Фабрика);
	
	_ТекстЗапроса = ВетисОбщегоНазначения.Сериализовать(_Фабрика, _Envelope);
	
	_Запрос = ПолучитьЗапрос(_составные.Ресурс, _ТекстЗапроса);
	
	_Ответ = _Соединение.ОтправитьДляОбработки(_Запрос);
	
	Возврат Новый Структура("Отказ, Текст", НЕ _Ответ.КодСостояния = 200, _Ответ.ПолучитьТелоКакСтроку("UTF-8"));
	
КонецФункции

Функция ПолучитьОтвет(пИмяФункции, applicationId, issuerId = Неопределено) Экспорт
	//запрос на получение результатов обработки заявки
	
	_составные = WSDLПолучить("ams-mercury.service").Составные;
	
	_Соединение = ПолучитьСоединение(_составные.Сервер, _составные.Порт, , , _составные.ЗащищенноеСоединение);
	
	_Фабрика = ФабрикаОбщая();
	
	_receiveRequest = ВетисApplication.receiveApplicationResultRequest(applicationId, issuerId);
	
	_Envelope = ВетисSoapEnvelope.Envelope(_receiveRequest, _Фабрика);
	
	_ТекстЗапроса = ВетисОбщегоНазначения.Сериализовать(_Фабрика, _Envelope);
	
	_Запрос = ПолучитьЗапрос(_составные.Ресурс, _ТекстЗапроса);
	
	_Ответ = _Соединение.ОтправитьДляОбработки(_Запрос);
	
	Возврат Новый Структура("Отказ, Текст", НЕ _Ответ.КодСостояния = 200, _Ответ.ПолучитьТелоКакСтроку("UTF-8"));
	
	//_Envelope = ВетисОбщегоНазначения.Десериализовать(_Фабрика, _Ответ.ПолучитьТелоКакСтроку("UTF-8"), _Envelope.Тип());
	//
	//_receiveResponse = ВетисSoapEnvelope.Извлечь(_Envelope).receiveApplicationResultResponse;
	//
	//Если _receiveResponse.Application.Status = ВетисКонстанты.Status_IN_PROCESS() Тогда
	//	Возврат Новый Структура("Отказ, Ответ, status", Истина, "", _receiveResponse.Application.status);
	//Иначе
	//	Если НЕ _receiveResponse.Application.status = ВетисКонстанты.Status_COMPLETED() Тогда
	//		Возврат Новый Структура("Отказ, Ответ, status", Истина, ПолучитьТекстОшибки(_receiveResponse.Application.errors), _receiveResponse.Application.status);
	//	Иначе
	//		Возврат Новый Структура("Отказ, Ответ, status", Ложь, _Ответ.ПолучитьТелоКакСтроку("UTF-8"), _receiveResponse.Application.status);
	//	КонецЕсли;
	//КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Время
// http://vetrf.ru/vetrf-forum/posts/list/390/6855.page#39813
// Во времени оформления ветеринарных сертификатов всегда указывается московское время

//приводит местное вермя к московскому
Функция ВремяСервиса(пДата = Неопределено) Экспорт
	
	//2017-11-28
	//processIncomingConsignmentRequest
	//11:03:36
	//<issueDate>        2017-11-28T11:03:36</issueDate>
	//<d7p1:deliveryDate>2017-11-28T11:03:36</d7p1:deliveryDate>
	//
	//11:03:37
	//<issueDate> 2017-11-28T11:03:36+03:00</issueDate>
	//<rcvDate>   2017-11-28T14:04:28+03:00</rcvDate>
	//<createDate>2017-11-28T14:04:28+03:00</createDate>
	//<updateDate>2017-11-28T14:04:28+03:00</updateDate>
	
	//2018-01-12
	//processIncomingConsignmentRequest
	//15:58:03
	//<issueDate>        2018-01-12T15:58:03</issueDate>
	//<d7p1:deliveryDate>2018-01-12T15:58:02</d7p1:deliveryDate>
	//
	//15:58:09
	//<issueDate>   2018-01-12T15:58:03+03:00</issueDate>
	//<rcvDate>     2018-01-12T13:58:53+03:00</rcvDate>
	//<prdcRsltDate>2018-01-12T13:58:54+03:00</prdcRsltDate>
	//<createDate>  2018-01-12T13:58:54+03:00</createDate>
	//<updateDate>  2018-01-12T13:58:54+03:00</updateDate>
	//
	//getStockEntryChangesListRequest
	//15:58:18
	//<issueDate>2018-01-12T15:58:18</issueDate>
	//
	//15:58:19
	//<issueDate>   2018-01-12T15:58:18+03:00</issueDate>
	//<rcvDate>     2018-01-12T13:59:07+03:00</rcvDate>
	//<prdcRsltDate>2018-01-12T13:59:07+03:00</prdcRsltDate>
	//<createDate>  2018-01-12T13:58:54+03:00</createDate>
	//<updateDate>  2018-01-12T13:58:54+03:00</updateDate>
	
	//Возврат УниверсальноеВремя(?(пДата = Неопределено, ТекущаяДата(), пДата));
	//Возврат УниверсальноеВремя(?(пДата = Неопределено, ТекущаяДата(), пДата) - 3*60*60);
	Возврат ?(пДата = Неопределено, ТекущаяДата(), пДата);
	
КонецФункции

//приводит московское вермя к местному
Функция ВремяМестное(пДата = Неопределено) Экспорт
	
	//2017-11-24
	//обратно приходит с часовым поясом - мировое + 3, т.е. московское
	//Возврат МестноеВремя(?(пДата = Неопределено, ТекущаяДата(), пДата) - 6*60*60);
	Возврат ?(пДата = Неопределено, ТекущаяДата(), пДата);
	
КонецФункции

#КонецОбласти

#Область Подписки

Процедура ВетисПриУстановкеНовогоКода(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
	
	Префикс = Настройки_Префикс() + Префикс;
	
КонецПроцедуры

Процедура ВетисПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	//ОбщегоНазначения.ДобавитьПрефиксОрганизации(Источник, Префикс);
	
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
	
	Префикс = Настройки_Префикс() + Префикс;
	
КонецПроцедуры

#КонецОбласти
