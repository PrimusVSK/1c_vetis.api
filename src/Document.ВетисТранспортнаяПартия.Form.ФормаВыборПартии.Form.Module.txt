
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КлючСтроки = Параметры.КлючСтроки;
	Количество = Параметры.Количество;
	КоличествоМест = Параметры.КоличествоМест;
	Номенклатура = Параметры.Номенклатура;
	НоменклатурнаяГруппа = Параметры.НоменклатурнаяГруппа;
	ХозяйствующийСубъект = Параметры.ХозяйствующийСубъект;
	Предприятие = Параметры.Предприятие;
	
	Для каждого _ПараметрыПартииДокСтрока Из Параметры.ПартииДок Цикл
		Если _ПараметрыПартииДокСтрока.КлючСвязи = КлючСтроки Тогда
			_ПартииДокСтрока = ПартииДок.Добавить();
		Иначе
			_ПартииДокСтрока = ПартииДокДругие.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(_ПартииДокСтрока, _ПараметрыПартииДокСтрока);
	КонецЦикла;
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаГотово(Команда)
	
	Закрыть(ПартииДок());
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРаспределитьПартии(Количеств)
	
	РаспределитьПартии();
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПартииПереместитьВниз(Команда)
	
	_ТекущиеДанные = Элементы.ПартииСписок.ТекущиеДанные;
	
	Если _ТекущиеДанные.Использовать Тогда
		_Строки = ПартииДок.НайтиСтроки(Новый Структура("КлючСвязи,guid", КлючСтроки, _ТекущиеДанные.guid));
		Если _Строки.Количество() = 0 Тогда
			Возврат;
		ИначеЕсли ПартииДок.Индекс(_Строки[0]) < ПартииДок.Количество() - 1 Тогда
			ПартииДок.Сдвинуть(ПартииДок.Индекс(_Строки[0]), 1);
			ПеренумероватьПартииДок();
			ЗаполнитьНаСервере();
			Элементы.ПартииСписок.ТекущаяСтрока = ПартииСписок.НайтиСтроки(Новый Структура("guid", _ТекущиеДанные.guid))[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПартииПереместитьВверх(Команда)
	
	_ТекущиеДанные = Элементы.ПартииСписок.ТекущиеДанные;
	
	Если _ТекущиеДанные.Использовать Тогда
		_Строки = ПартииДок.НайтиСтроки(Новый Структура("КлючСвязи,guid", КлючСтроки, _ТекущиеДанные.guid));
		Если _Строки.Количество() = 0 Тогда
			Возврат;
		ИначеЕсли ПартииДок.Индекс(_Строки[0]) > 0 Тогда
			ПартииДок.Сдвинуть(ПартииДок.Индекс(_Строки[0]), -1);
			ПеренумероватьПартииДок();
			ЗаполнитьНаСервере();
			Элементы.ПартииСписок.ТекущаяСтрока = ПартииСписок.НайтиСтроки(Новый Структура("guid", _ТекущиеДанные.guid))[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПартииСписокИспользоватьПриИзменении(Элемент)
	
	_ТекущиеДанные = Элементы.ПартииСписок.ТекущиеДанные;
	
	Если _ТекущиеДанные.Использовать Тогда
		_ПартииСтрока = ПартииДок.Добавить();
		ЗаполнитьЗначенияСвойств(_ПартииСтрока, _ТекущиеДанные);
		_ПартииСтрока.КлючСвязи = КлючСтроки;
	Иначе
		ПартииДок.Удалить(ПартииДок.НайтиСтроки(Новый Структура("КлючСвязи,guid", КлючСтроки, _ТекущиеДанные.guid))[0]);
	КонецЕсли;
	
	ПеренумероватьПартииДок();
	
	КоличествоИтог = ПартииДок.Итог("Количество");
	КоличествоМестИтог = ПартииДок.Итог("КоличествоМест");
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииСписокКоличествоПриИзменении(Элемент)
	
	_ТекущиеДанные = Элементы.ПартииСписок.ТекущиеДанные;
	
	_ТекущиеДанные.Использовать = _ТекущиеДанные.Количество > 0;
	
	Если _ТекущиеДанные.Использовать Тогда
		_ПартииСтроки = ПартииДок.НайтиСтроки(Новый Структура("КлючСвязи,guid", КлючСтроки, _ТекущиеДанные.guid));
		Если _ПартииСтроки.Количество() = 0 Тогда
			_ПартииСтрока = ПартииДок.Добавить();
		Иначе
			_ПартииСтрока = _ПартииСтроки[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(_ПартииСтрока, _ТекущиеДанные);
		_ПартииСтрока.КлючСвязи = КлючСтроки;
	Иначе
		ПартииДок.Удалить(ПартииДок.НайтиСтроки(Новый Структура("КлючСвязи,guid", КлючСтроки, _ТекущиеДанные.guid))[0]);
	КонецЕсли;
	
	ПеренумероватьПартииДок();
	
	КоличествоИтог = ПартииДок.Итог("Количество");
	КоличествоМестИтог = ПартииДок.Итог("КоличествоМест");
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииСписокКоличествоМестПриИзменении(Элемент)
	
	ПартииСписокКоличествоПриИзменении(Элемент);
	
КонецПроцедуры


&НаКлиенте
Процедура ПеренумероватьПартииДок()
	_НомерСтроки = 1;
	Для каждого _Строка Из ПартииДок Цикл
		_Строка.НомерСтроки = _НомерСтроки;
		_НомерСтроки = _НомерСтроки + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	//сделать: для отправленных разделить строку партии, если есть остаток
	
	ПартииСписок.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.Представление КАК СТРОКА) КАК Представление,
	|	ВЫРАЗИТЬ(_Таблица.КлючСвязи КАК ЧИСЛО) КАК КлючСвязи,
	|	ВЫРАЗИТЬ(_Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(_Таблица.Количество КАК ЧИСЛО) КАК Количество,
	|	ВЫРАЗИТЬ(_Таблица.КоличествоМест КАК ЧИСЛО) КАК КоличествоМест,
	|	ВЫРАЗИТЬ(_Таблица.Отправлена КАК БУЛЕВО) КАК Отправлена
	|ПОМЕСТИТЬ ВПартииДок
	|ИЗ
	|	&ПартииДок КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.Представление КАК СТРОКА) КАК Представление,
	|	ВЫРАЗИТЬ(_Таблица.КлючСвязи КАК ЧИСЛО) КАК КлючСвязи,
	|	ВЫРАЗИТЬ(_Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(_Таблица.Количество КАК ЧИСЛО) КАК Количество,
	|	ВЫРАЗИТЬ(_Таблица.КоличествоМест КАК ЧИСЛО) КАК КоличествоМест,
	|	ВЫРАЗИТЬ(_Таблица.Отправлена КАК БУЛЕВО) КАК Отправлена
	|ПОМЕСТИТЬ ВПартииДокДругие
	|ИЗ
	|	&ПартииДокДругие КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(_ТекущиеПартии.guid, _ДругиеПартии.guid) КАК guid,
	|	ЕСТЬNULL(_ТекущиеПартии.Представление, _ДругиеПартии.Представление) КАК Представление,
	|	&КлючСвязи КАК КлючСвязи,
	|	ЕСТЬNULL(_ТекущиеПартии.НомерСтроки, 999999) КАК НомерСтроки,
	|	ЕСТЬNULL(_ТекущиеПартии.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(_ТекущиеПартии.КоличествоМест, 0) КАК КоличествоМест,
	|	ЕСТЬNULL(_ДругиеПартии.Количество, 0) КАК ДругиеКоличество,
	|	ЕСТЬNULL(_ДругиеПартии.КоличествоМест, 0) КАК ДругиеКоличествоМест,
	|	ЕСТЬNULL(_ТекущиеПартии.Отправлена, Ложь) КАК Отправлена
	|ПОМЕСТИТЬ ВПартииДокОстаток
	|ИЗ
	|	ВПартииДок КАК _ТекущиеПартии
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВПартииДокДругие КАК _ДругиеПартии
	|		ПО _ТекущиеПартии.guid = _ДругиеПартии.guid
	|			И НЕ _ТекущиеПартии.КлючСвязи = _ДругиеПартии.КлючСвязи
	|ГДЕ
	|	ИСТИНА
	|	И ЕСТЬNULL(_ТекущиеПартии.КлючСвязи, &КлючСвязи) = &КлючСвязи
	|	И ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Партии.guid,
	|	_Партии.entryNumber,
	|	_Партии.updateDate,
	|	_Партии.volume КАК Количество,
	|	_Партии.packingAmount КАК КоличествоМест,
	|	_SubProduct.Ссылка КАК НоменклатурнаяГруппа,
	|	_SubProduct.guid КАК SubProductGuid,
	|	_ProductItem.Ссылка КАК Номенклатура,
	|	_Unit.Ссылка КАК ЕдиницаИзмерения,
	|	_PackingForm.Ссылка КАК Упаковка
	|ПОМЕСТИТЬ ВПартии
	|ИЗ
	|	РегистрСведений.ВетисСкладскойЖурнал КАК _Партии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _SubProduct
	|		ПО _Партии.SubProduct = _SubProduct.guid
	|			И _SubProduct.Ссылка Ссылка Справочник.НоменклатурныеГруппы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _ProductItem
	|		ПО _Партии.ProductItem = _ProductItem.guid
	|			И _Партии.Предприятие = _ProductItem.Предприятие
	|			И _ProductItem.Ссылка Ссылка Справочник.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Unit
	|		ПО _Партии.Unit = _Unit.guid
	|			И _Unit.Ссылка Ссылка Справочник.КлассификаторЕдиницИзмерения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _PackingForm
	|		ПО _Партии.PackingForm = _PackingForm.guid
	|			И _PackingForm.Ссылка Ссылка Справочник.ВетисPackingForm
	|ГДЕ
	|	ИСТИНА
	|	И _Партии.last
	|	И НЕ _Партии.status В(201,400,410,420,430)
	|	И _Партии.volume > 0
	|//о1	И _ProductItem.Ссылка = &Номенклатура
	|//о2	И _SubProduct.Ссылка = &НоменклатурнаяГруппа
	|	И _Партии.ХозяйствующийСубъект = &ХозяйствующийСубъект
	|	И _Партии.Предприятие = &Предприятие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(_ПартииДок.Количество, 0) = 0 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Использовать,
	|	ЕСТЬNULL(_ПартииДок.НомерСтроки, 999999) КАК НомерСтроки,
	//|	&КлючСвязи КАК КлючСвязи,
	//|	_ПартииДок.КлючСтроки,
	| ЕСТЬNULL(_Партии.guid, _ПартииДок.guid) КАК guid,
	| ЕСТЬNULL(_ПартииДок.Представление, """") КАК Представление,
	| ЕСТЬNULL(_Партии.updateDate, ДатаВремя(1,1,1)) КАК updateDate,
	| ЕСТЬNULL(_Партии.entryNumber, """") КАК entryNumber,
	| _Партии.SubProductGuid,
	|	_Партии.НоменклатурнаяГруппа,
	|	_Партии.Номенклатура,
	|	_Партии.ЕдиницаИзмерения,
	|	_Партии.Упаковка,
	| ЕСТЬNULL(_ПартииДок.Количество, 0) КАК Количество,
	| ЕСТЬNULL(_ПартииДок.КоличествоМест, 0) КАК КоличествоМест,
	|	ЕСТЬNULL(_Партии.Количество, 0) - ЕСТЬNULL(_ПартииДок.ДругиеКоличество, 0) КАК КоличествоПартии,
	|	ЕСТЬNULL(_Партии.КоличествоМест, 0) - ЕСТЬNULL(_ПартииДок.ДругиеКоличествоМест, 0) КАК КоличествоМестПартии,
	|	_ПартииДок.Отправлена КАК Отправлена
	|ИЗ
	|	ВПартии КАК _Партии
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВПартииДокОстаток КАК _ПартииДок
	|		ПО _Партии.guid = _ПартииДок.guid
	|ГДЕ
	|	ИСТИНА
	//|	И ЕСТЬNULL(_Партии.Количество, 0) > ЕСТЬNULL(_ПартииДок.ДругиеКоличество, 0) 
	|	И ИСТИНА
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	| updateDate, //сначала старые
	|	_Партии.Количество";
	
	Запрос.УстановитьПараметр("ХозяйствующийСубъект", ХозяйствующийСубъект);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	
	Запрос.УстановитьПараметр("ПартииДок", ПартииДок.Выгрузить());
	Запрос.УстановитьПараметр("ПартииДокДругие", ПартииДокДругие.Выгрузить());
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("КлючСвязи", КлючСтроки);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о2", "");
	
	//сделать: отбор по номенклатуре
	//Если ЗначениеЗаполнено(_ТекущиеДанные.Номенклатура) Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о1", "");
	//ИначеЕсли ЗначениеЗаполнено(_ТекущиеДанные.НоменклатурнаяГруппа) Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о2", "");
	//Иначе
	//	Возврат;
	//КонецЕсли;
	
	_Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	_Результат = Запрос.Выполнить();
	_Выборка = _Результат.Выбрать();
	
	КоличествоИтог = 0;
	КоличествоМестИтог = 0;
	
	Пока _Выборка.Следующий() Цикл
		
		Если _Выборка.guid = NULL Тогда
			Если НЕ _Выборка.Отправлена Тогда
				ПартииДок.Удалить(_Выборка.НомерСтроки-1);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		_строка = ПартииСписок.Добавить();
		
		ЗаполнитьЗначенияСвойств(_строка, _Выборка);
		
		//сделать: заменить представление на страну, дату выработки, срок годности
		Если ЗначениеЗаполнено(_Выборка.entryNumber) Тогда
			_строка.Представление = _Выборка.entryNumber + " / " + Формат(_Выборка.updateDate, "ДЛФ=D");
		КонецЕсли;
		
		КоличествоИтог = КоличествоИтог + _Выборка.Количество;
		
		КоличествоМестИтог = КоличествоМестИтог + _Выборка.КоличествоМест;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПартии()
	
	_Количество = Количество;
	
	_Структура = Новый Структура("guid");
	
	Для каждого _ПартииСтрока Из ПартииДок Цикл
		
		_Структура.guid = _ПартииСтрока.guid;
		
		_ПартииСписокСтроки = ПартииСписок.НайтиСтроки(_Структура);
		
		Если _ПартииСписокСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		_ПартииСписокСтрока = _ПартииСписокСтроки[0];
		
		Если _ПартииСписокСтрока.Отправлена Тогда
			_Количество = _Количество - _ПартииСписокСтрока.Количество;
			Продолжить;
		ИначеЕсли _Количество <= 0 Тогда
			_ПартииСтрока.Количество = 0;
		ИначеЕсли _ПартииСписокСтрока.КоличествоПартии >= _Количество Тогда
			_ПартииСтрока.Количество = _Количество;
			_Количество = 0;
		Иначе
			_ПартииСтрока.Количество = _ПартииСписокСтрока.КоличествоПартии;
			_Количество = _Количество - _ПартииСписокСтрока.КоличествоПартии;
		КонецЕсли;
		
		_ПартииСтрока.КоличествоМест = _ПартииСтрока.Количество * ?(_ПартииСписокСтрока.КоличествоПартии = 0, 0, _ПартииСписокСтрока.КоличествоМестПартии / _ПартииСписокСтрока.КоличествоПартии);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПартииДок()
	
	//_ПартииСтроки = ПартииДок.Выгрузить();
	_ПартииСтроки = ПартииСписок.Выгрузить(Новый Структура("Использовать", Истина));
	
	_результат = Новый Массив;
	_колонки = "";
	Для каждого _колонка Из _ПартииСтроки.Колонки Цикл
		_колонки = _колонки + ?(_колонки="","",",") + _колонка.Имя;
	КонецЦикла;
	
	Для каждого _ПартииСтрока Из _ПартииСтроки Цикл
		_РезультатСтрока = Новый Структура(_колонки);
		ЗаполнитьЗначенияСвойств(_РезультатСтрока, _ПартииСтрока);
		_РезультатСтрока.КлючСвязи = КлючСтроки;
		_результат.Добавить(_РезультатСтрока);
	КонецЦикла;
	
	Возврат _результат;
	
КонецФункции
