
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаОтправить(Команда)
	
	Перем _Отказ, _Ошибка;
	
	Если НЕ Объект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	КомандаОтправитьНаСервере(_Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоОстаткам(Команда)
	КомандаЗаполнитьПоОстаткамНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//Если Поле.Имя = "ТоварыВозвратныйВСД" Тогда
	//	//ОткрытьЗначение(Элементы.Товары.ТекущиеДанные.ВозвратныйВСД);
	//ИначеЕсли Поле.Имя = "ТоварыВСД" И ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.guid) Тогда
	//	//ОткрытьЗначение(Элементы.Товары.ТекущиеДанные.ВСД);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Копирование;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Для каждого _ид Из Элемент.ВыделенныеСтроки Цикл
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(_ид);
		Если ТекущиеДанные.Отправлена Тогда
			Отказ = Истина;
			Сообщить("Отправленные удалять нельзя");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого _ид Из Элемент.ВыделенныеСтроки Цикл
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(_ид);
		Для каждого _СтрокаУпаковка Из Объект.Упаковка.НайтиСтроки(Новый Структура("КлючСвязи", ТекущиеДанные.КлючСтроки)) Цикл
			Для каждого _СтрокаМаркировка Из Объект.Маркировка.НайтиСтроки(Новый Структура("КлючСвязи", _СтрокаУпаковка.КлючСтроки)) Цикл
				Объект.Маркировка.Удалить(_СтрокаМаркировка);
			КонецЦикла;
			Объект.Упаковка.Удалить(_СтрокаУпаковка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	//Для каждого _СтрокаУпаковка Из Объект.Упаковка Цикл
	//	Если Объект.Товары.НайтиСтроки(Новый Структура("КлючСтроки", _СтрокаУпаковка.КлючСвязи)).Количество()=0 Тогда
	//		Объект.Упаковка.Удалить(_СтрокаУпаковка);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Для каждого _СтрокаМаркировка Из Объект.Маркировка Цикл
	//	Если Объект.Упаковка.НайтиСтроки(Новый Структура("КлючСтроки", _СтрокаМаркировка.КлючСвязи)).Количество()=0 Тогда
	//		Объект.Маркировка.Удалить(_СтрокаМаркировка);
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	_ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если _ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Упаковка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", _ТекущиеДанные.КлючСтроки);
	
	_СтрокиУпаковка = Объект.Упаковка.НайтиСтроки(Новый Структура("КлючСвязи", _ТекущиеДанные.КлючСтроки));
	Если _СтрокиУпаковка.Количество() > 0 Тогда
		Элементы.Упаковка.ТекущаяСтрока = _СтрокиУпаковка[0];
		Элементы.Маркировка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", _СтрокиУпаковка[0].КлючСтроки);
	Иначе
		Элементы.Маркировка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСтроки = ПолучитьКлючСтрокиТовары();
		Элементы.Упаковка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", Элемент.ТекущиеДанные.КлючСтроки);
		Если НЕ Элементы.Упаковка.ТекущаяСтрока = Неопределено Тогда
			_ТекущиеДанные = Объект.Упаковка.НайтиПоИдентификатору(Элементы.Упаковка.ТекущаяСтрока);
			Если НЕ _ТекущиеДанные = Неопределено Тогда
				Элементы.Маркировка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", _ТекущиеДанные.КлючСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура УпаковкаПриАктивизацииСтроки(Элемент)
	
	_ТекущиеДанные = Элементы.Упаковка.ТекущиеДанные;
	
	Если _ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Маркировка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", _ТекущиеДанные.КлючСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Элементы.Товары.ТекущиеДанные = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСвязи = Элементы.Товары.ТекущиеДанные.КлючСтроки;
		Элемент.ТекущиеДанные.КлючСтроки = ПолучитьКлючСтрокиУпаковка();
		Элементы.Маркировка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", Элемент.ТекущиеДанные.КлючСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПередУдалением(Элемент, Отказ)
	
	Для каждого _Строка Из Объект.Маркировка.НайтиСтроки(Новый Структура("КлючСвязи", Элемент.ТекущиеДанные.КлючСтроки)) Цикл
		Объект.Маркировка.Удалить(_Строка);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура МаркировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Элементы.Упаковка.ТекущиеДанные = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	_ТекущиеДанные = Элементы.Упаковка.ТекущиеДанные;
	
	Если _ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСвязи = _ТекущиеДанные.КлючСтроки;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьКлючСтрокиТовары()
	
	_список = Объект.Товары.Выгрузить().ВыгрузитьКолонку("КлючСтроки");
	
	Для _Индекс = 1 По 999 Цикл
		Если _список.Найти(_Индекс) = Неопределено Тогда
			Возврат _Индекс;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ПолучитьКлючСтрокиУпаковка()
	
	_список = Объект.Упаковка.Выгрузить().ВыгрузитьКолонку("КлючСтроки");
	
	Для _Индекс = 1 По 999 Цикл
		Если _список.Найти(_Индекс) = Неопределено Тогда
			Возврат _Индекс;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура КомандаОтправитьНаСервере(пОтказ = Ложь, пОшибка = "")
	
	_СтруктураПоиска = Новый Структура("КлючСвязи");
	
	_Версия20 = Ветис.Версия_2_0();
	_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	_ВетисMercuryApplications = ?(_Версия20, ВетисMercuryApplications_2_0, ВетисMercuryApplications);
	
	_issuerId = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(Объект.ХС);
	_enterpriseGuid = _ВетисCerberusEnterpriseСлой1с.Enterprise(Объект.Предприятие);
	
	Для каждого _СтрокаТовары Из Объект.Товары Цикл
		
		Если _СтрокаТовары.Отправлена Тогда
			Продолжить;
		КонецЕсли;
		
		_СтруктураПоиска.КлючСвязи = _СтрокаТовары.КлючСтроки;
		_СтрокиУпаковка = Объект.Упаковка.НайтиСтроки(_СтруктураПоиска);
		_СтрокиМаркировка = Новый Массив;
		Для каждого _СтрокаУпаковка Из _СтрокиУпаковка Цикл
			_СтруктураПоиска.КлючСвязи = _СтрокаУпаковка.КлючСтроки;
			_СтрокаУпаковкаСтрокиМаркировка = Объект.Маркировка.НайтиСтроки(_СтруктураПоиска);
			Для каждого _СтрокаМаркировка Из _СтрокаУпаковкаСтрокиМаркировка Цикл
				_СтрокиМаркировка.Добавить(_СтрокаМаркировка);
			КонецЦикла;
		КонецЦикла;
		
		_Результат = ВетисMercuryApplicationsСлой1с.ResolveDiscrepancy(Объект.Предприятие, _СтрокаТовары, _СтрокиУпаковка, _СтрокиМаркировка, _СтрокаТовары.АктПричина, _СтрокаТовары.АктОписание, _issuerId, пОтказ, пОшибка);
		
		Если пОтказ = Истина Тогда
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		Для каждого _stockEntry Из _Результат.stockEntry Цикл
			Если _СтрокаТовары.uuid = _stockEntry.uuid Тогда
				_СтрокаТовары.Отправлена = Истина;
			КонецЕсли;
			Если _stockEntry.active И _stockEntry.last Тогда
				//_СтрокаТовары.uuid = _stockEntry.uuid;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
	Записать();
	
КонецПроцедуры

&НаСервере
Процедура КомандаЗаполнитьПоОстаткамНаСервере(пОтказ = Ложь, пОшибка = "")
	
	Перем _stockEntry, _параметры;
	
	_Версия20 = Ветис.Версия_2_0();
	
	Если НЕ _Версия20 Тогда
		Возврат;
	КонецЕсли;
	
	_issuerId = ВетисDictionaryСлой1с.BusinessEntity(Объект.ХС);
	
	_enterpriseGuid = ВетисDictionaryСлой1с.Enterprise(Объект.Предприятие);
	
	_sp = ВетисMercuryVetdocument_2_0.StockEntrySearchPattern(ВетисКонстанты.StockEntryBlankFilter_NOT_BLANK());
	
	_КлючСтроки = 0;
	
	Объект.Товары.Очистить();
	Объект.Упаковка.Очистить();
	Объект.Маркировка.Очистить();
	
	Пока ВетисMercuryApplications_2_0.GetStockEntryListСледующий(_enterpriseGuid, _sp, _issuerId, _stockEntry, _параметры, пОтказ, пОшибка) Цикл
		
		_КлючСтроки = _КлючСтроки + 1;
		
		_строкаСЖ = Объект.Товары.Добавить();
		
		_строкаСЖ.guid = _stockEntry.guid;
		_строкаСЖ.uuid = _stockEntry.uuid;
		
		//Если _Версия20 Тогда
			ВетисMercuryVetdocumentСлой1с.BatchКонвертировать_20(_строкаСЖ, _stockEntry.batch, Объект.Упаковка, Объект.Маркировка, пОтказ, пОшибка);
		//Иначе
		//	ВетисMercuryVetdocumentСлой1с.BatchКонвертировать(_строкаСЖ, _stockEntry.batch, Объект.Упаковка, Объект.Маркировка, пОтказ, пОшибка);
		//КонецЕсли;
		
		Если пОтказ = Истина Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры
