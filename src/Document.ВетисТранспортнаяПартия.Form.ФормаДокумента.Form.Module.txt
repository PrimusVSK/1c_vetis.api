
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтправительСвязь = Истина;
	
	ПолучательСвязь = Истина;
	
	МногоуровневаяУпаковка = Ветис.Настройки_МногоуровневаяУпаковка();
	
	ЗаполнитьРеквизитыФормы();
	
	Для каждого _Элемент Из Элементы Цикл
		Если ТипЗнч(_Элемент) = Тип("ПолеФормы") Тогда
			Если Лев(_Элемент.ПутьКДанным, 3) = "всд" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "ВСДПриИзменении");
			ИначеЕсли Лев(_Элемент.ПутьКДанным, 3) = "ттн" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "ТТНПриИзменении");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ПартииСписокguid.Видимость = Ветис.Настройки_ПоказыватьGuid();
	
	Элементы.ГруппаДокументОснование.Видимость = Ветис.Настройки_Интеграция();
	
	Элементы.ТоварыКомандаЗаполнитьТовары.Видимость = Ветис.Настройки_Интеграция();
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗаписатьРеквизитыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Параметр = ЭтаФорма.ИмяФормы Тогда
		//
	ИначеЕсли ИмяСобытия = "ВетисНастройки" Тогда
		УстановитьВидимость();
	ИначеЕсли ИмяСобытия = "ВетисВерсия" Тогда
		УстановитьВидимость();
	ИначеЕсли ИмяСобытия = "ВетисОтладка" Тогда
		//
	ИначеЕсли ИмяСобытия = "ВетисТестовый" Тогда
		//
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаЗаполнитьТовары(Команда)
	КомандаЗаполнитьТоварыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправить(Команда)
	
	Перем _Отказ, _Ошибка;
	
	Если НЕ Объект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	КомандаОтправитьНаСервере(_Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьПартии(Команда)
	
	//ОбновитьПартииНаСервере();
	
	Перем _Отказ, _Ошибка;
	
	ВетисХозяйственныеОперации.СинхронизироватьСкладскойЖурнал(Объект.Отправитель, Объект.ОтправительПредприятие, , _Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	Иначе
		Сообщить("Партии обновлены успешно");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРаспределитьПартии(Количеств)
	
	РаспределитьПартии();
	
	ОбновитьПартииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПартииПереместитьВниз(Команда)
	
	_ТекущиеДанные = Элементы.ПартииСписок.ТекущиеДанные;
	
	Если _ТекущиеДанные.Использовать Тогда
		_строка = Объект.Партии.НайтиСтроки(Новый Структура("guid", _ТекущиеДанные.guid))[0];
		Если Объект.Партии.Индекс(_строка) < Объект.Партии.Количество() - 1 Тогда
			Объект.Партии.Сдвинуть(Объект.Партии.Индекс(_строка), 1);
			ОбновитьПартииНаСервере();
			Элементы.ПартииСписок.ТекущаяСтрока = ПартииСписок.НайтиСтроки(Новый Структура("guid", _ТекущиеДанные.guid))[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПартииПереместитьВверх(Команда)
	
	_ТекущиеДанные = Элементы.ПартииСписок.ТекущиеДанные;
	
	Если _ТекущиеДанные.Использовать Тогда
		_строка = Объект.Партии.НайтиСтроки(Новый Структура("guid", _ТекущиеДанные.guid))[0];
		Если Объект.Партии.Индекс(_строка) > 0 Тогда
			Объект.Партии.Сдвинуть(Объект.Партии.Индекс(_строка), -1);
			ОбновитьПартииНаСервере();
			Элементы.ПартииСписок.ТекущаяСтрока = ПартииСписок.НайтиСтроки(Новый Структура("guid", _ТекущиеДанные.guid))[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборПартий(Команда)
	
	_ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если _ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	_Параметры = Новый Структура;
	_Параметры.Вставить("КлючСтроки",     _ТекущиеДанные.КлючСтроки);
	_Параметры.Вставить("Количество",     _ТекущиеДанные.Количество);
	_Параметры.Вставить("КоличествоМест", _ТекущиеДанные.КоличествоМест);
	_Параметры.Вставить("Номенклатура",   _ТекущиеДанные.Номенклатура);
	_Параметры.Вставить("НоменклатурнаяГруппа", _ТекущиеДанные.НоменклатурнаяГруппа);
	_Параметры.Вставить("Предприятие",    Объект.ОтправительПредприятие);
	_Параметры.Вставить("ХозяйствующийСубъект", Объект.Отправитель);
	_Параметры.Вставить("ПартииДок",      ПартииДок(_ТекущиеДанные.КлючСтроки));
	
	_ПараметрыОО = Новый Структура;
	_ПараметрыОО.Вставить("КлючСтроки", _ТекущиеДанные.КлючСтроки);
	
	ОткрытьФорму("Документ.ВетисТранспортнаяПартия.Форма.ФормаВыборПартии", _Параметры, ЭтаФорма, _ТекущиеДанные.КлючСтроки,,,Новый ОписаниеОповещения("ТоварыПартияНачалоВыбораОбработкаОпопвещения", ЭтаФорма, _ПараметрыОО));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборПартийАвтоматически(Команда)
	
	Для каждого _ПартииСтрока Из Объект.Партии Цикл
		Если _ПартииСтрока.Отправлена Тогда
			Сообщить("Есть отправленные партии, подобрать автоматически невозможно");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ПодборПартийАвтоматическиНаСервере();
	
	ОбновитьПредставление();
	
	//ОбновитьПартииНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоДокументу(Команда)
	
	КомандаЗаполнитьПоДокументуНаСервере();
КонецПроцедуры

&НаСервере
Процедура КомандаЗаполнитьПоДокументуНаСервере()
	//Добавлено VladimirVS89, 2017-12-12
	
	ДокументОснование=Объект.ДокументОснование;
	
	Если ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Объект.Отправитель=ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(ДокументОснование.Организация);
		
		Объект.Получатель=ДокументОснование.Контрагент;
		
		Объект.ОтправительПредприятие=ВетисХозяйственныеОперации.ПолучитьПредприятиеПоСкладу(ДокументОснование.Склад);
		
		Объект.ПолучательПредприятие=ВетисХозяйственныеОперации.ПолучитьСписокПредприятийПоХС(Объект.Получатель, Истина);
		
		ттнНомер=ДокументОснование.Номер;
		
		ттнДата=ДокументОснование.Дата;
		
		ттнТип=Перечисления.ВетисDocumentType.ТОРГ12;
		
		//нетиповой реквизит, опционально
		//ттнТранспорт=ДокументОснование.Транспорт;
		
		Объект.Ответственный=Пользователи.ТекущийПользователь();
		
		
		КомандаЗаполнитьТоварыНаСервере();
		
	КонецЕсли;
	//Конец добавления VladimirVS89, 2017-12-12
КонецПроцедуры


&НаКлиенте
Процедура ОтправительПриИзменении(Элемент)
	
	Объект.ОтправительПредприятие = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВетисФормы.BusinessEntityФормаВыбора(ЭтаФорма, "ОтправительОбработкаОповещения", СтандартнаяОбработка, Объект.Отправитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительОбработкаОповещения(пРезультат, пПараметры) Экспорт
	
	Если НЕ пРезультат = Неопределено Тогда
		Модифицированность = Истина;
		Объект.Отправитель = пРезультат;
		Объект.ОтправительПредприятие = Неопределено;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправительПредприятиеПриИзменении(Элемент)
	
	Объект.ОтправительПредприятие = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ОтправительСвязь Тогда
		Если ЗначениеЗаполнено(Объект.Отправитель) Тогда
			ВетисФормы.EnterpriseФормаВыбора(ЭтаФорма, "ОтправительПредприятиеОбработкаОповещения", СтандартнаяОбработка, Объект.ОтправительПредприятие, Объект.Отправитель);
		Иначе
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	Иначе
		ВетисФормы.EnterpriseФормаВыбора(ЭтаФорма, "ОтправительПредприятиеОбработкаОповещения", СтандартнаяОбработка, Объект.ОтправительПредприятие);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПредприятиеОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		Объект.ОтправительПредприятие = Результат;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправительСвязьНажатие(Элемент)
	
	ОтправительСвязь = НЕ ОтправительСвязь;
	
	УстановитьВидимостьКлиент("ОтправительСвязь");
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	Объект.ПолучательПредприятие = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВетисФормы.BusinessEntityФормаВыбора(ЭтаФорма, "ПолучательОбработкаОповещения", СтандартнаяОбработка, Объект.Получатель);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		Объект.Получатель = Результат;
		Объект.ПолучательПредприятие = Неопределено;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучательПредприятиеПриИзменении(Элемент)
	
	Объект.ПолучательПредприятие = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПолучательСвязь Тогда
		Если ЗначениеЗаполнено(Объект.Получатель) Тогда
			ВетисФормы.EnterpriseФормаВыбора(ЭтаФорма, "ПолучательПредприятиеОбработкаОповещения", СтандартнаяОбработка, Объект.ПолучательПредприятие, Объект.Получатель);
		Иначе
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	Иначе
		ВетисФормы.EnterpriseФормаВыбора(ЭтаФорма, "ПолучательПредприятиеОбработкаОповещения", СтандартнаяОбработка, Объект.ПолучательПредприятие);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПредприятиеОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		Объект.ПолучательПредприятие = Результат;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучательСвязьНажатие(Элемент)
	
	ПолучательСвязь = НЕ ПолучательСвязь;
	
	УстановитьВидимостьКлиент("ПолучательСвязь");
	
КонецПроцедуры


&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	_ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если _ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Упаковка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", _ТекущиеДанные.КлючСтроки);
	
	_СтрокиУпаковка = Объект.Упаковка.НайтиСтроки(Новый Структура("КлючСвязи", _ТекущиеДанные.КлючСтроки));
	Если _СтрокиУпаковка.Количество() > 0 Тогда
		Элементы.Упаковка.ТекущаяСтрока = _СтрокиУпаковка[0];
		Элементы.Маркировка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", _СтрокиУпаковка[0].КлючСтроки);
	Иначе
		Элементы.Маркировка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСтроки = ПолучитьКлючСтроки();
		Элементы.Упаковка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", Элемент.ТекущиеДанные.КлючСтроки);
		Если НЕ Элементы.Упаковка.ТекущаяСтрока = Неопределено Тогда
			_ТекущиеДанные = Объект.Упаковка.НайтиПоИдентификатору(Элементы.Упаковка.ТекущаяСтрока);
			Если НЕ _ТекущиеДанные = Неопределено Тогда
				Элементы.Маркировка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", _ТекущиеДанные.КлючСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	_ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	_ПартииСтроки = Объект.Партии.НайтиСтроки(Новый Структура("КлючСвязи", _ТекущиеДанные.КлючСтроки));
	
	Для каждого _ПартииСтрока Из _ПартииСтроки Цикл
		Если _ПартииСтрока.Отправлена Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Объект.Партии.Удалить(_ПартииСтрока);
	КонецЦикла;
	
	ПартииСписок.Очистить();
	
	Для каждого _СтрокаУпаковка Из Объект.Упаковка.НайтиСтроки(Новый Структура("КлючСвязи", Элемент.ТекущиеДанные.КлючСтроки)) Цикл
		Для каждого _СтрокаМаркировка Из Объект.Маркировка.НайтиСтроки(Новый Структура("КлючСвязи", _СтрокаУпаковка.КлючСтроки)) Цикл
			Объект.Маркировка.Удалить(_СтрокаМаркировка);
		КонецЦикла;
		Объект.Упаковка.Удалить(_СтрокаУпаковка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТоварыНоменклатураПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КомандаПодборПартий(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияНачалоВыбораОбработкаОпопвещения(пРезультат, пПараметры) Экспорт
	
	Если НЕ пРезультат = Неопределено Тогда
		
		_ПартииСтроки = Объект.Партии.НайтиСтроки(Новый Структура("КлючСвязи", пПараметры.КлючСтроки));
		Для каждого _ПартииСтрока Из _ПартииСтроки Цикл
			Объект.Партии.Удалить(_ПартииСтрока);
		КонецЦикла;
		
		//Объект.Партии.Очистить();
		
		Для каждого _РезультатСтрока Из пРезультат Цикл
			_ПартииСтрока = Объект.Партии.Добавить();
			_ПартииСтрока.КлючСвязи = пПараметры.КлючСтроки;
			ЗаполнитьЗначенияСвойств(_ПартииСтрока, _РезультатСтрока);
		КонецЦикла;
		
		ОбновитьПредставление();
		
		//ОбновитьПартииНаСервере();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоМестПриИзменении(Элемент)
	
	_ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	_СтрокиУпаковка = Объект.Упаковка.НайтиСтроки(Новый Структура("КлючСвязи", _ТекущиеДанные.КлючСтроки));
	
	Если _СтрокиУпаковка.Количество() > 0 Тогда
		_СтрокаУпаковка = _СтрокиУпаковка[0];
		_СтрокиМаркировка = Объект.Маркировка.НайтиСтроки(Новый Структура("КлючСвязи", _СтрокаУпаковка.КлючСтроки));
		Если _СтрокиМаркировка.Количество() > 0 Тогда
			_СтрокиМаркировка[0].Маркировка = _ТекущиеДанные.Маркировка;
		КонецЕсли;
	Иначе
		_СтрокаУпаковка = Объект.Упаковка.Добавить();
		_СтрокаУпаковка.КлючСтроки = ПолучитьКлючСтрокиУпаковка();
		_СтрокаУпаковка.КлючСвязи = _ТекущиеДанные.КлючСтроки;
		_СтрокаУпаковка.Уровень = ВетисВызовСервера.Настройки_УровеньУпаковки();
		_СтрокаМаркировка = Объект.Маркировка.Добавить();
		_СтрокаМаркировка.КлючСвязи = _СтрокаУпаковка.КлючСтроки;
		_СтрокаМаркировка.Маркировка = _ТекущиеДанные.Маркировка;
		_СтрокаМаркировка.КлассМаркировки = ВетисВызовСервера.Настройки_КлассМаркировки();
	КонецЕсли;
	
	_СтрокаУпаковка.Количество = _ТекущиеДанные.КоличествоМест;
	_СтрокаУпаковка.Упаковка = _ТекущиеДанные.Упаковка;
	
КонецПроцедуры


&НаКлиенте
Процедура ПартииИспользоватьПриИзменении(Элемент)
	
	_ТекущиеДанные = Элементы.ПартииСписок.ТекущиеДанные;
	
	Если _ТекущиеДанные.Использовать Тогда
		_ПартииСтрока = Объект.Партии.Добавить();
		ЗаполнитьЗначенияСвойств(_ПартииСтрока, _ТекущиеДанные);
	Иначе
		Объект.Партии.Удалить(Объект.Партии.НайтиСтроки(Новый Структура("КлючСвязи,guid", _ТекущиеДанные.КлючСвязи, _ТекущиеДанные.guid))[0]);
	КонецЕсли;
	
	ОбновитьПредставление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииСписокКоличествоПриИзменении(Элемент)
	
	_ТекущиеДанные = Элементы.ПартииСписок.ТекущиеДанные;
	
	Если _ТекущиеДанные.Использовать Тогда
		
		_ПартииСтроки = Объект.Партии.НайтиСтроки(Новый Структура("guid", _ТекущиеДанные.guid));
		
		Если _ПартииСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(_ПартииСтроки[0], _ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьПредставление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииСписокКоличествоМестПриИзменении(Элемент)
	
	ПартииСписокКоличествоПриИзменении(Элемент);
	
КонецПроцедуры


&НаКлиенте
Процедура УпаковкаПриАктивизацииСтроки(Элемент)
	
	_ТекущиеДанные = Элементы.Упаковка.ТекущиеДанные;
	
	Если _ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Маркировка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", _ТекущиеДанные.КлючСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Элементы.Товары.ТекущиеДанные = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСвязи = Элементы.Товары.ТекущиеДанные.КлючСтроки;
		Элемент.ТекущиеДанные.КлючСтроки = ПолучитьКлючСтрокиУпаковка();
		Элементы.Маркировка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", Элемент.ТекущиеДанные.КлючСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПередУдалением(Элемент, Отказ)
	
	Для каждого _Строка Из Объект.Маркировка.НайтиСтроки(Новый Структура("КлючСвязи", Элемент.ТекущиеДанные.КлючСтроки)) Цикл
		Объект.Маркировка.Удалить(_Строка);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура МаркировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Элементы.Упаковка.ТекущиеДанные = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	_ТекущиеДанные = Элементы.Упаковка.ТекущиеДанные;
	
	Если _ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСвязи = _ТекущиеДанные.КлючСтроки;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВСДПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ТТНПриИзменении(Элемент)
	
	Если Элемент = Элементы.ттнТранспорт Тогда
		ттнТранспортПриИзменении(Элемент);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ттнТранспортПриИзменении(Элемент)
	
	ттнТранспортПриИзмененииНаСервере();
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьНаСервере()
	
	_Объект = РеквизитФормыВЗначение("Объект");
	
	_Объект.Заполнить(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(_Объект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура КомандаОтправитьНаСервере(пОтказ = Ложь, пОшибка = "")
	
	ЗаписатьРеквизитыФормы();
	
	ВетисMercuryApplicationsСлой1с.TransportOperation(Объект, пОтказ, пОшибка);
	
	Если пОтказ = Истина Тогда Возврат; КонецЕсли;
	
	Записать();
	
	//ОбновитьПартииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПартииНаСервере()
	
	ПартииСписок.Очистить();
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.guid КАК Строка(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.КлючСтроки КАК Число) КлючСтроки,
	|	ВЫРАЗИТЬ(_Таблица.НомерСтроки КАК Число) НомерСтроки,
	|	ВЫРАЗИТЬ(_Таблица.Количество КАК Число) Количество,
	|	ВЫРАЗИТЬ(_Таблица.КоличествоМест КАК Число) КоличествоМест,
	|	ВЫРАЗИТЬ(_Таблица.Отправлена КАК Булево) Отправлена
	|ПОМЕСТИТЬ ВПартииДок
	|ИЗ
	|	&ПартииДок КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Партии.guid,
	|	_Партии.entryNumber,
	|	_Партии.updateDate,
	|	_Партии.volume КАК Количество,
	|	_Партии.packingAmount КАК КоличествоМест,
	|	_SubProduct.Ссылка КАК НоменклатурнаяГруппа,
	|	_SubProduct.guid КАК SubProductGuid,
	|	_ProductItem.Ссылка КАК Номенклатура,
	|	_Unit.Ссылка КАК ЕдиницаИзмерения,
	|	_PackingForm.Ссылка КАК Упаковка
	|ПОМЕСТИТЬ ВПартии
	|ИЗ
	|	РегистрСведений.ВетисСкладскойЖурнал КАК _Партии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _SubProduct
	|		ПО _Партии.SubProduct = _SubProduct.guid
	|			И _SubProduct.Ссылка Ссылка Справочник.НоменклатурныеГруппы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _ProductItem
	|		ПО _Партии.ProductItem = _ProductItem.guid
	|			И _Партии.Предприятие = _ProductItem.Предприятие
	|			И _ProductItem.Ссылка Ссылка Справочник.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Unit
	|		ПО _Партии.Unit = _Unit.guid
	|			И _Unit.Ссылка Ссылка Справочник.КлассификаторЕдиницИзмерения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _PackingForm
	|		ПО _Партии.PackingForm = _PackingForm.guid
	|			И _PackingForm.Ссылка Ссылка Справочник.ВетисPackingForm
	|ГДЕ
	|	ИСТИНА
	|	И _Партии.last
	|	И НЕ _Партии.status В(201,400,410,420,430)
//http://help.vetrf.ru/wiki/TransportOperation
//Указанная версия записи (uuid) складского журнала продукции в ИС Меркурий должна быть актуальной, неаннулированной и неудалённой.
//201	WITHDRAWN - Запись журнала аннулирована.
//400	DELETED - Запись была удалена.
//410	DELETED_WHEN_MERGE - Запись была удалена в результате объединения.
//420	DELETED_WHEN_SPLIT - Запись была удалена в результате разделения.
//430	DELETED_WHEN_ATTACH - Запись была удалена в результате присоединения.
	|	И _Партии.volume > 0
	|//о1	И _ProductItem.Ссылка = &Номенклатура
	|//о2	И _SubProduct.Ссылка = &НоменклатурнаяГруппа
	|	И _Партии.ХозяйствующийСубъект = &ХозяйствующийСубъект
	|	И _Партии.Предприятие = &Предприятие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА _ПартииДок.guid ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Использовать,
	|	ЕСТЬNULL(_ПартииДок.НомерСтроки, 999999) КАК НомерСтроки,
	|	&КлючСвязи КАК КлючСвязи,
	|	_ПартииДок.КлючСтроки,
	| ЕСТЬNULL(_Партии.guid, _ПартииДок.guid) КАК guid,
	| ЕСТЬNULL(_Партии.updateDate, ДатаВремя(1,1,1)) КАК updateDate,
	| ЕСТЬNULL(_Партии.entryNumber, """") КАК entryNumber,
	| _Партии.SubProductGuid,
	|	_Партии.НоменклатурнаяГруппа,
	|	_Партии.Номенклатура,
	|	_Партии.ЕдиницаИзмерения,
	|	_Партии.Упаковка,
	|	Выбор Когда _ПартииДок.Количество есть null Тогда 0 Иначе _ПартииДок.Количество Конец КАК Количество,
	|	Выбор Когда _ПартииДок.КоличествоМест есть null Тогда 0 Иначе _ПартииДок.КоличествоМест Конец КАК КоличествоМест,
	|	ЕСТЬNULL(_Партии.Количество, 0) КАК КоличествоПартии,
	|	ЕСТЬNULL(_Партии.КоличествоМест, 0) КАК КоличествоМестПартии,
	|	_ПартииДок.Отправлена КАК Отправлена
	|ИЗ
	|	ВПартии КАК _Партии
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВПартииДок КАК _ПартииДок
	|		ПО _Партии.guid = _ПартииДок.guid
	|ГДЕ
	|	ИСТИНА
	|	И ИСТИНА
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	| updateDate, //сначала старые
	|	_Партии.Количество";
	
	Запрос.УстановитьПараметр("ХозяйствующийСубъект", Объект.Отправитель);
	Запрос.УстановитьПараметр("Предприятие", Объект.ОтправительПредприятие);
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		Запрос.УстановитьПараметр("ПартииДок", Объект.Партии.Выгрузить(Новый Структура("КлючСвязи", -1)));
		Запрос.УстановитьПараметр("КлючСвязи", -1);
	Иначе
		_ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
		
		Запрос.УстановитьПараметр("Номенклатура", _ТекущиеДанные.Номенклатура);
		Запрос.УстановитьПараметр("НоменклатурнаяГруппа", _ТекущиеДанные.НоменклатурнаяГруппа);
		Запрос.УстановитьПараметр("КлючСвязи", _ТекущиеДанные.КлючСтроки);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о2", "");
		
		Запрос.УстановитьПараметр("ПартииДок", Объект.Партии.Выгрузить(Новый Структура("КлючСвязи", _ТекущиеДанные.КлючСтроки)));
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(_ТекущиеДанные.Номенклатура) Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о1", "");
	//ИначеЕсли ЗначениеЗаполнено(_ТекущиеДанные.НоменклатурнаяГруппа) Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о2", "");
	//Иначе
	//	Возврат;
	//КонецЕсли;
	
	_Результат = Запрос.Выполнить();
	_Выборка = _Результат.Выбрать();
	
	КоличествоИтог = 0;
	КоличествоМестИтог = 0;
	
	Пока _Выборка.Следующий() Цикл
		
		Если _Выборка.guid = NULL Тогда
			Если НЕ _Выборка.Отправлена Тогда
				Объект.Партии.Удалить(_Выборка.НомерСтроки-1);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		_строка = ПартииСписок.Добавить();
		
		ЗаполнитьЗначенияСвойств(_строка, _Выборка);
		
		_строка.Представление = _Выборка.entryNumber + " / " + Формат(_Выборка.updateDate, "ДЛФ=D");
		
		КоличествоИтог = КоличествоИтог + _Выборка.Количество;
		
		КоличествоМестИтог = КоличествоМестИтог + _Выборка.КоличествоМест;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставление()
	
	Для каждого _ТоварыСтрока Из Объект.Товары Цикл
		_ТоварыСтрока.ПартияGuid = "";
		_ТоварыСтрока.ПартияПредставление = "";
		_ТоварыСтрока.КоличествоПартии = 0;
		_ТоварыСтрока.КоличествоМестПартии = 0;
		Для каждого _ПартииСтрока Из Объект.Партии Цикл
			Если _ТоварыСтрока.КлючСтроки = _ПартииСтрока.КлючСвязи Тогда
				_ТоварыСтрока.ПартияGuid = _ТоварыСтрока.ПартияGuid + ?(_ТоварыСтрока.ПартияGuid="", "", "; ") + _ПартииСтрока.guid;
				_ТоварыСтрока.ПартияПредставление = _ТоварыСтрока.ПартияПредставление
					+ ?(_ТоварыСтрока.ПартияПредставление="", "", "; ")
					+ _ПартииСтрока.Представление
					+ " (" + Формат(_ПартииСтрока.Количество, "ЧГ=") + ")";
				_ТоварыСтрока.КоличествоПартии = _ТоварыСтрока.КоличествоПартии + _ПартииСтрока.Количество;
				_ТоварыСтрока.КоличествоМестПартии = _ТоварыСтрока.КоличествоМестПартии + _ПартииСтрока.КоличествоМест;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура ПолучитьПартииПоТовару(_ТекущиеДанные)
	//Добавлено VladimirVS89, 2017-12-12
	
	//Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	
	ПартииСписок.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.guid КАК Строка(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.НомерСтроки КАК Число) НомерСтроки,
	|	ВЫРАЗИТЬ(_Таблица.Количество КАК Число) Количество,
	|	ВЫРАЗИТЬ(_Таблица.КоличествоМест КАК Число) КоличествоМест,
	|	ВЫРАЗИТЬ(_Таблица.Отправлена КАК Булево) Отправлена
	|ПОМЕСТИТЬ ВПартииДок
	|ИЗ
	|	&ПартииДок КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Партии.ХозяйствующийСубъект,
	|	_Партии.Предприятие,
	|	_Партии.guid,
	|	_Партии.volume КАК Количество,
	|	_Партии.packingAmount КАК КоличествоМест,
	|	_SubProduct.Ссылка КАК НоменклатурнаяГруппа,
	|	_SubProduct.guid КАК SubProductGuid,
	|	_ProductItem.Ссылка КАК Номенклатура,
	|	_Unit.Ссылка КАК ЕдиницаИзмерения,
	|	_PackingForm.Ссылка КАК Упаковка
	|ПОМЕСТИТЬ ВПартии
	|ИЗ
	|	РегистрСведений.ВетисСкладскойЖурнал КАК _Партии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _SubProduct
	|		ПО _Партии.SubProduct = _SubProduct.guid
	|			И _SubProduct.Ссылка Ссылка Справочник.НоменклатурныеГруппы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _ProductItem
	|		ПО _Партии.ProductItem = _ProductItem.guid
	|			И _Партии.Предприятие = _ProductItem.Предприятие
	|			И _ProductItem.Ссылка Ссылка Справочник.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Unit
	|		ПО _Партии.Unit = _Unit.guid
	|			И _Unit.Ссылка Ссылка Справочник.КлассификаторЕдиницИзмерения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _PackingForm
	|		ПО _Партии.PackingForm = _PackingForm.guid
	|			И _PackingForm.Ссылка Ссылка Справочник.ВетисPackingForm
	|ГДЕ
	|	ИСТИНА
	|	И _Партии.last
	|	И НЕ _Партии.status В(201,400,410,420,430)
//http://help.vetrf.ru/wiki/TransportOperation
//Указанная версия записи (uuid) складского журнала продукции в ИС Меркурий должна быть актуальной, неаннулированной и неудалённой.
//201	WITHDRAWN - Запись журнала аннулирована.
//400	DELETED - Запись была удалена.
//410	DELETED_WHEN_MERGE - Запись была удалена в результате объединения.
//420	DELETED_WHEN_SPLIT - Запись была удалена в результате разделения.
//430	DELETED_WHEN_ATTACH - Запись была удалена в результате присоединения.
	|	И _Партии.volume > 0
	|//о1	И _ProductItem.Ссылка = &Номенклатура
	|//о2	И _SubProduct.Ссылка = &НоменклатурнаяГруппа
	|	И _Партии.ХозяйствующийСубъект = &ХозяйствующийСубъект
	|	И _Партии.Предприятие = &Предприятие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА _ПартииДок.guid ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Использовать,
	|	ЕСТЬNULL(_ПартииДок.НомерСтроки, 999999) КАК НомерСтроки,
	|	&КлючСвязи КАК КлючСвязи,
	|	_Партии.ХозяйствующийСубъект,
	|	_Партии.Предприятие,
	| ЕСТЬNULL(_Партии.guid, _ПартииДок.guid) КАК guid,
	| _Партии.SubProductGuid,
	|	_Партии.НоменклатурнаяГруппа,
	|	_Партии.Номенклатура,
	|	_Партии.ЕдиницаИзмерения,
	|	_Партии.Упаковка,
	|	Выбор Когда _ПартииДок.Количество есть null Тогда 0 Иначе _ПартииДок.Количество Конец КАК Количество,
	|	Выбор Когда _ПартииДок.КоличествоМест есть null Тогда 0 Иначе _ПартииДок.КоличествоМест Конец КАК КоличествоМест,
	|	_Партии.Количество КАК КоличествоПартии,
	|	_Партии.КоличествоМест КАК КоличествоМестПартии,
	|	_ПартииДок.Отправлена КАК Отправлена
	|ИЗ
	|	ВПартии КАК _Партии
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВПартииДок КАК _ПартииДок
	|		ПО _Партии.guid = _ПартииДок.guid
	|ГДЕ
	|	ИСТИНА
	|	И ИСТИНА
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	_Партии.Количество";
	
	Запрос.УстановитьПараметр("ХозяйствующийСубъект", Объект.Отправитель);
	Запрос.УстановитьПараметр("Предприятие", Объект.ОтправительПредприятие);
	
	//Изменено VladimirVS89, 2017-12-12
	//Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
	Если _ТекущиеДанные = Неопределено Тогда
	//Конец изменения VladimirVS89, 2017-12-12
		Запрос.УстановитьПараметр("ПартииДок", Объект.Партии.Выгрузить(Новый Структура("КлючСвязи", -1)));
		Запрос.УстановитьПараметр("КлючСвязи", -1);
	Иначе
		//Удалено VladimirVS89, 2017-12-12
		//_ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
		//Конец удаления VladimirVS89, 2017-12-12
		
		Запрос.УстановитьПараметр("Номенклатура", _ТекущиеДанные.Номенклатура);
		Запрос.УстановитьПараметр("НоменклатурнаяГруппа", _ТекущиеДанные.НоменклатурнаяГруппа);
		Запрос.УстановитьПараметр("КлючСвязи", _ТекущиеДанные.КлючСтроки);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о2", "");
		
		Запрос.УстановитьПараметр("ПартииДок", Объект.Партии.Выгрузить(Новый Структура("КлючСвязи", _ТекущиеДанные.КлючСтроки)));
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(_ТекущиеДанные.Номенклатура) Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о1", "");
	//ИначеЕсли ЗначениеЗаполнено(_ТекущиеДанные.НоменклатурнаяГруппа) Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о2", "");
	//Иначе
	//	Возврат;
	//КонецЕсли;
	
	_Результат = Запрос.Выполнить();
	_Выборка = _Результат.Выбрать();
	
	КоличествоИтог = 0;
	КоличествоМестИтог = 0;
	
	Пока _Выборка.Следующий() Цикл
		
		Если _Выборка.guid = NULL Тогда
			Если НЕ _Выборка.Отправлена Тогда
				//Изменено VladimirVS89, 2017-12-12
				//Объект.Партии.Удалить(_Выборка.НомерСтроки-1);
				Объект.Партии.Удалить(_ТекущиеДанные.НомерСтроки-1);
				//Конец изменения VladimirVS89, 2017-12-12
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		_строка = ПартииСписок.Добавить();
		
		ЗаполнитьЗначенияСвойств(_строка, _Выборка);
		
		КоличествоИтог = КоличествоИтог + _Выборка.Количество;
		
		КоличествоМестИтог = КоличествоМестИтог + _Выборка.КоличествоМест;
		
	КонецЦикла;
	
	//Конец добавления VladimirVS89, 2017-12-12
КонецПроцедуры

&НаСервере
Процедура РаспределитьПартии()
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	_ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	_ПартииСтроки = Объект.Партии.НайтиСтроки(Новый Структура("КлючСвязи", _ТекущиеДанные.КлючСтроки));
	
	_Количество = _ТекущиеДанные.Количество;
	
	_Структура = Новый Структура("guid");
	
	Для каждого _ПартииСтрока Из _ПартииСтроки Цикл
		
		_Структура.guid = _ПартииСтрока.guid;
		
		_ПартииСписокСтроки = ПартииСписок.НайтиСтроки(_Структура);
		
		//Добавлено VladimirVS89, 2017-12-12
		РаспределенныеПартии=Объект.Партии.НайтиСтроки(_Структура);
		//Конец добавления VladimirVS89, 2017-12-12
		
		Если _ПартииСписокСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		_ПартииСписокСтрока = _ПартииСписокСтроки[0];
		
		//Добавлено VladimirVS89, 2017-12-12
		Для каждого строка из РаспределенныеПартии Цикл;
			
			Если _ПартииСтрока.КлючСвязи<>строка.КлючСвязи Тогда
				
				_ПартииСписокСтрока.КоличествоПартии=_ПартииСписокСтрока.КоличествоПартии-строка.Количество;
				
			КонецЕсли;
			
		КонецЦикла;
		//Конец добавления VladimirVS89, 2017-12-12
		
		Если _ПартииСписокСтрока.Отправлена Тогда
			_Количество = _Количество - _ПартииСписокСтрока.Количество;
			Продолжить;
		ИначеЕсли _Количество <= 0 Тогда
			_ПартииСтрока.Количество = 0;
		ИначеЕсли _ПартииСписокСтрока.КоличествоПартии >= _Количество Тогда
			_ПартииСтрока.Количество = _Количество;
			_Количество = 0;
		Иначе
			_ПартииСтрока.Количество = _ПартииСписокСтрока.КоличествоПартии;
			_Количество = _Количество - _ПартииСписокСтрока.КоличествоПартии;
		КонецЕсли;
		
		_ПартииСтрока.КоличествоМест = _ПартииСтрока.Количество * ?(_ПартииСписокСтрока.КоличествоПартии = 0, 0, _ПартииСписокСтрока.КоличествоМестПартии / _ПартииСписокСтрока.КоличествоПартии);
		
		Модифицированность = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКлючСтроки()
	
	_список = Объект.Товары.Выгрузить().ВыгрузитьКолонку("КлючСтроки");
	
	Для _Индекс = 1 По 999 Цикл
		Если _список.Найти(_Индекс) = Неопределено Тогда
			Возврат _Индекс;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ПолучитьКлючСтрокиУпаковка()
	
	_список = Объект.Упаковка.Выгрузить().ВыгрузитьКолонку("КлючСтроки");
	
	Для _Индекс = 1 По 999 Цикл
		Если _список.Найти(_Индекс) = Неопределено Тогда
			Возврат _Индекс;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере()
	
	_ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	_ТекущиеДанные.НоменклатурнаяГруппа = _ТекущиеДанные.Номенклатура.НоменклатурнаяГруппа;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()
	
	Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
		
		Для каждого _Строка Из Объект.ВСД Цикл
			Если Лев(_Реквизит.Имя, 3) = "всд" Тогда
				ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 4)];
			КонецЕсли;
		КонецЦикла;
		
		Для каждого _Строка Из Объект.ТТН Цикл
			Если Лев(_Реквизит.Имя, 3) = "ттн" Тогда
				ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 4)];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРеквизитыФормы()
	
	Объект.ВСД.Очистить();
	Объект.ТТН.Очистить();
	
	_СтрокаВСД = Объект.ВСД.Добавить();
	_СтрокаТТН = Объект.ТТН.Добавить();
	
	Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
		Если Лев(_Реквизит.Имя, 3) = "всд" Тогда
			_СтрокаВСД[Сред(_Реквизит.Имя, 4)] = ЭтаФорма[_Реквизит.Имя];
		ИначеЕсли Лев(_Реквизит.Имя, 3) = "ттн" Тогда
			_СтрокаТТН[Сред(_Реквизит.Имя, 4)] = ЭтаФорма[_Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КомандаЗаполнитьТоварыНаСервере()
	//Добавлено VladimirVS89, 2017-12-12
	
	ДокументОснование=Объект.ДокументОснование;
	
	Если ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		//Удалено Мохин, кпс, 2017-12-12
		//Кг=Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("166");
		//Конец удаления Мохин, кпс, 2017-12-12
		
		сч=1;
		
		Для каждого строка из ДокументОснование.Товары Цикл
			
			Товар=Объект.Товары.Добавить();
			
			//ЗаполнитьЗначенияСвойств(Товар,строка);
			
			Товар.НоменклатурнаяГруппа=строка.Номенклатура.НоменклатурнаяГруппа;
			
			Товар.Номенклатура=строка.Номенклатура;
			
			//Изменено Мохин, кпс, 2017-12-12
			//Товар.ЕдиницаИзмерения=Кг;
			Товар.ЕдиницаИзмерения=строка.ЕдиницаИзмерения;
			//Конец изменения Мохин, кпс, 2017-12-12
			
			//нетиповой реквизит
			//Товар.Количество=строка.Вес;  //*строка.Количество*строка.Коэффициент
			Товар.Количество=строка.Количество*строка.Коэффициент;
			
			Товар.КлючСтроки = сч;
			
			сч=сч+1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//Конец добавления VladimirVS89, 2017-12-12
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКлиент(пИмяСобытия = Неопределено)
	
	Если пИмяСобытия = "ОтправительСвязь" ИЛИ пИмяСобытия = Неопределено Тогда
		Элементы.ОтправительСвязь.Картинка = ?(ОтправительСвязь, БиблиотекаКартинок.ВетисЕстьСвязь, БиблиотекаКартинок.ВетисНетСвязи);
	КонецЕсли;
	
	Если пИмяСобытия = "ПолучательСвязь" ИЛИ пИмяСобытия = Неопределено Тогда
		Элементы.ПолучательСвязь.Картинка = ?(ПолучательСвязь, БиблиотекаКартинок.ВетисЕстьСвязь, БиблиотекаКартинок.ВетисНетСвязи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость(пИмяСобытия = Неопределено)
	
	_МногоуровневаяУпаковка = Ветис.Настройки_МногоуровневаяУпаковка();
	
	Если пИмяСобытия = Неопределено ИЛИ пИмяСобытия = "ВетисНастройки" ИЛИ пИмяСобытия = "ВетисВерсия" Тогда
		
		_Версия20 = Ветис.Версия_2_0();
		
		Элементы.всдВетсанэкспертиза.Видимость = НЕ _Версия20;
		Элементы.всдВетсанэкспертиза20.Видимость = _Версия20;
		
		Элементы.ГруппаУпаковка.Видимость = _МногоуровневаяУпаковка;
		
		Элементы.ТоварыКоличествоМест.Видимость               = НЕ _МногоуровневаяУпаковка;
		Элементы.ТоварыУпаковка.Видимость                     = НЕ _МногоуровневаяУпаковка;
		Элементы.ТоварыМаркировка.Видимость                   = НЕ _МногоуровневаяУпаковка;
		
		Если НЕ МногоуровневаяУпаковка = _МногоуровневаяУпаковка Тогда
			Модифицированность = Истина;
			Если _МногоуровневаяУпаковка Тогда
				//интерактивно все синхронизируется, возможно это излишнее действие
				Объект.Упаковка.Очистить();
				Объект.Маркировка.Очистить();
				
				Для каждого _СтрокаТовары Из Объект.Товары Цикл
					_СтрокаУпаковка = Объект.Упаковка.Добавить();
					_СтрокаУпаковка.КлючСтроки = ПолучитьКлючСтрокиУпаковка();
					_СтрокаУпаковка.КлючСвязи = _СтрокаТовары.КлючСтроки;
					_СтрокаУпаковка.Уровень = ВетисВызовСервера.Настройки_УровеньУпаковки();
					_СтрокаУпаковка.Количество = _СтрокаТовары.КоличествоМест;
					_СтрокаУпаковка.Упаковка = _СтрокаТовары.Упаковка;
					
					_СтрокаМаркировка = Объект.Маркировка.Добавить();
					_СтрокаМаркировка.КлючСвязи = _СтрокаУпаковка.КлючСтроки;
					_СтрокаМаркировка.Маркировка = _СтрокаТовары.Маркировка;
					_СтрокаМаркировка.КлассМаркировки = ВетисВызовСервера.Настройки_КлассМаркировки();
				КонецЦикла;
			Иначе
				Для каждого _СтрокаТовары Из Объект.Товары Цикл
					
					_СтрокиУпаковка = Объект.Упаковка.НайтиСтроки(Новый Структура("КлючСвязи", _СтрокаТовары.КлючСтроки));
					
					Если _СтрокиУпаковка.Количество() = 0 Тогда
						_СтрокаТовары.КоличествоМест = 0;
						_СтрокаТовары.Упаковка = Неопределено;
						_СтрокаТовары.Маркировка = Неопределено;
						Продолжить;
					КонецЕсли;
					
					_СтрокаУпаковка = _СтрокиУпаковка[0];
					
					_СтрокаТовары.КоличествоМест = _СтрокаУпаковка.Количество;
					_СтрокаТовары.Упаковка = _СтрокаУпаковка.Упаковка;
					
					_СтрокиМаркировка = Объект.Маркировка.НайтиСтроки(Новый Структура("КлючСвязи", _СтрокаУпаковка.КлючСтроки));
					
					Если _СтрокиМаркировка.Количество() > 0 Тогда
						_СтрокаТовары.Маркировка = _СтрокиМаркировка[0].Маркировка;
						//остальные удаляем
						_СтрокиМаркировка.Удалить(0);
						Для каждого _СтрокаМаркировка Из _СтрокиМаркировка Цикл
							Объект.Маркировка.Удалить(_СтрокаМаркировка);
						КонецЦикла;
					КонецЕсли;
					
					//остальные удаляем
					_СтрокиУпаковка.Удалить(0);
					Для каждого _СтрокаУпаковка Из _СтрокиУпаковка Цикл
						Объект.Упаковка.Удалить(_СтрокаУпаковка);
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	МногоуровневаяУпаковка = _МногоуровневаяУпаковка;
	
КонецПроцедуры

&НаСервере
Процедура ПодборПартийАвтоматическиНаСервере()
	
	//простой вариант - очистка партий (только для нового документа)
	Объект.Партии.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	_Партии.guid,
	|	_Партии.entryNumber,
	|	_Партии.updateDate,
	|	_Партии.volume КАК Количество,
	|	_Партии.packingAmount КАК КоличествоМест,
	|	_SubProduct.Ссылка КАК НоменклатурнаяГруппа,
	|	_SubProduct.guid КАК SubProductGuid,
	|	_ProductItem.Ссылка КАК Номенклатура,
	|	_Unit.Ссылка КАК ЕдиницаИзмерения,
	|	_PackingForm.Ссылка КАК Упаковка
	|ИЗ
	|	РегистрСведений.ВетисСкладскойЖурнал КАК _Партии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _SubProduct
	|		ПО _Партии.SubProduct = _SubProduct.guid
	|			И _SubProduct.Ссылка Ссылка Справочник.НоменклатурныеГруппы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _ProductItem
	|		ПО _Партии.ProductItem = _ProductItem.guid
	|			И _Партии.Предприятие = _ProductItem.Предприятие
	|			И _ProductItem.Ссылка Ссылка Справочник.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Unit
	|		ПО _Партии.Unit = _Unit.guid
	|			И _Unit.Ссылка Ссылка Справочник.КлассификаторЕдиницИзмерения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _PackingForm
	|		ПО _Партии.PackingForm = _PackingForm.guid
	|			И _PackingForm.Ссылка Ссылка Справочник.ВетисPackingForm
	|ГДЕ
	|	ИСТИНА
	|	И _Партии.last
	|	И НЕ _Партии.status В(201,400,410,420,430)
	|	И _Партии.volume > 0
	|//о1	И _ProductItem.Ссылка В(&Номенклатура)
	|//о2	И _SubProduct.Ссылка В (&НоменклатурнаяГруппа)
	|	И _Партии.ХозяйствующийСубъект = &ХозяйствующийСубъект
	|	И _Партии.Предприятие = &Предприятие
	|
	|УПОРЯДОЧИТЬ ПО
	| _Партии.updateDate, //сначала старые
	|	_Партии.volume //сначала маленькие";
	
	Запрос.УстановитьПараметр("ХозяйствующийСубъект", Объект.Отправитель);
	Запрос.УстановитьПараметр("Предприятие", Объект.ОтправительПредприятие);
	
	Запрос.УстановитьПараметр("Номенклатура", Объект.Товары.Выгрузить(,"Номенклатура"));
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", Объект.Товары.Выгрузить(,"НоменклатурнаяГруппа"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о2", "");
	
	//сделать: отбор по номенклатуре
	//Если ЗначениеЗаполнено(_ТекущиеДанные.Номенклатура) Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о1", "");
	//ИначеЕсли ЗначениеЗаполнено(_ТекущиеДанные.НоменклатурнаяГруппа) Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о2", "");
	//Иначе
	//	Возврат;
	//КонецЕсли;
	
	_ПартииСписок = Запрос.Выполнить().Выгрузить();
	
	_Структура = Новый Структура("guid");
	
	Для каждого _ТоварыСтрока Из Объект.Товары Цикл
		
		_Количество = _ТоварыСтрока.Количество;
		
		Для каждого _ПартииСписокСтрока Из _ПартииСписок Цикл
			
			Если НЕ _ТоварыСтрока.НоменклатурнаяГруппа = _ПартииСписокСтрока.НоменклатурнаяГруппа Тогда
				Продолжить;
			КонецЕсли;
			
			//пока без номенклатуры
			//Если ЗначениеЗаполнено(_ТоварыСтрока.Номенклатура) И НЕ _ТоварыСтрока.Номенклатура = _ПартииСписокСтрока.Номенклатура Тогда
			//	Продолжить;
			//КонецЕсли;
			
			Если _ПартииСписокСтрока.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			_Коэффициент = ?(_ПартииСписокСтрока.Количество = 0, 0, _ПартииСписокСтрока.КоличествоМест / _ПартииСписокСтрока.Количество);
			
			Если _ПартииСписокСтрока.Количество >= _Количество Тогда
				_ПартииСписокСтрока.Количество = _ПартииСписокСтрока.Количество - _Количество;
				_ПартииСписокСтрока.КоличествоМест = _ПартииСписокСтрока.Количество * _Коэффициент;
				_КоличествоПартии = _Количество;
				_КоличествоМестПартии = _Количество * _Коэффициент;
				_Количество = 0;
			Иначе
				_КоличествоПартии = _ПартииСписокСтрока.Количество;
				_КоличествоМестПартии = _ПартииСписокСтрока.Количество * _Коэффициент;
				_Количество = _Количество - _ПартииСписокСтрока.Количество;
				_ПартииСписокСтрока.Количество = 0;
				_ПартииСписокСтрока.КоличествоМест = 0;
			КонецЕсли;
			
			_ПартииСтрока = Объект.Партии.Добавить();
			
			ЗаполнитьЗначенияСвойств(_ПартииСтрока, _ПартииСписокСтрока);
			
			_ПартииСтрока.КлючСвязи = _ТоварыСтрока.КлючСтроки;
			_ПартииСтрока.Количество = _КоличествоПартии;
			_ПартииСтрока.КоличествоМест = _КоличествоМестПартии;
			
			//сделать: заменить представление на страну, дату выработки, срок годности
			_ПартииСтрока.Представление = _ПартииСписокСтрока.entryNumber + " / " + Формат(_ПартииСписокСтрока.updateDate, "ДЛФ=D");
			
			Если _Количество = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Функция ПартииДок(пКлючСтроки)
	
	//_ПартииСтроки = Объект.Партии.Выгрузить(Новый Структура("КлючСвязи", пКлючСтроки));
	_ПартииСтроки = Объект.Партии.Выгрузить();
	
	_результат = Новый Массив;
	_колонки = "";
	Для каждого _колонка Из _ПартииСтроки.Колонки Цикл
		_колонки = _колонки + ?(_колонки="","",",") + _колонка.Имя;
	КонецЦикла;
	
	Для каждого _ПартииСтрока Из _ПартииСтроки Цикл
		_результат.Добавить(Новый Структура(_колонки));
		ЗаполнитьЗначенияСвойств(_результат[_результат.ВГраница()], _ПартииСтрока);
	КонецЦикла;
	
	Возврат _результат;
	
КонецФункции

&НаСервере
Функция ттнТранспортПриИзмененииНаСервере()
	
	ттнНомерТранспорта = ттнТранспорт.Номер;
	
	ттнНомерПрицепа = ттнТранспорт.НомерПрицепа;
	
	ттнТипТранспорта = ттнТранспорт.ТипТранспорта;
	
	ттнПосредник = ттнТранспорт.Перевозчик;
	
	ттнСпособХранения = ттнТранспорт.СпособХранения;
	
КонецФункции
